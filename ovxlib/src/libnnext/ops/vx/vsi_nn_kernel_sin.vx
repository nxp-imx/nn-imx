#include "cl_viv_vx_ext.h"

float4 Sin_(float4 x)
{
    return sin(x);
}
_viv_uniform float inputScale;
_viv_uniform float inputTail;
_viv_uniform float outputScale;
_viv_uniform float outputZP;
_viv_uniform VXC_512Bits uniExtract8Data_2x8;
_viv_uniform VXC_512Bits uniDatatoFp32Part0_4x4;
_viv_uniform VXC_512Bits uniDatatoFp32Part1_4x4;

#define TENSOR_TRANSCENDENTAL(funcName, src_type_name, dst_type_name, src_type, \
                src_copy_type, convert_type, dst_type, dst_copy_type) \
    __kernel void vxTensor##funcName##_##src_type_name##to##dst_type_name( \
    __read_only  image2d_array_t  input, \
    __write_only image2d_array_t  output \
    ) \
{ \
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0); \
    src_type      src0; \
    src_copy_type src1; \
    VXC_ReadImage2DArray(src0, input, coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src1, src0, 16); \
 \
    float4 vecA; \
    float4 vecB; \
    VXC_DP4x4(vecA, src1, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniDatatoFp32Part0_4x4); \
    VXC_DP4x4(vecB, src1, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniDatatoFp32Part1_4x4); \
    vecA = vecA * inputScale + inputTail; \
    vecB = vecB * inputScale + inputTail; \
    vecA = funcName##_(vecA); \
    vecB = funcName##_(vecB); \
    vecA = vecA * outputScale + outputZP; \
    vecB = vecB * outputScale + outputZP; \
 \
    convert_type dst0, dst1; \
    _viv_asm(CONV_RTE, dst0, vecA); \
    _viv_asm(CONV_RTE, dst1, vecB); \
    dst_type dst2; \
    VXC_DP2x8(dst2, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1), uniExtract8Data_2x8); \
    dst_copy_type dst; \
    _viv_asm(COPY, dst, dst2, 16); \
    VXC_WriteImage2DArray(output, coord, dst, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
}
//SIN
TENSOR_TRANSCENDENTAL(Sin, F16, F16, vxc_short8, vxc_half8,  half4, vxc_half8,  vxc_short8)
TENSOR_TRANSCENDENTAL(Sin, F16, I8,  vxc_short8, vxc_half8,  int4,  vxc_char8,  vxc_char8)
TENSOR_TRANSCENDENTAL(Sin, F16, U8,  vxc_short8, vxc_half8,  int4,  vxc_uchar8, vxc_uchar8)
TENSOR_TRANSCENDENTAL(Sin, F16, I16, vxc_short8, vxc_half8,  int4,  vxc_short8, vxc_short8)
TENSOR_TRANSCENDENTAL(Sin, I8,  I8,  vxc_char8,  vxc_char8,  int4,  vxc_char8,  vxc_char8)
TENSOR_TRANSCENDENTAL(Sin, I8,  F16, vxc_char8,  vxc_char8,  half4, vxc_half8,  vxc_short8)
TENSOR_TRANSCENDENTAL(Sin, U8,  U8,  vxc_uchar8, vxc_uchar8, int4,  vxc_uchar8, vxc_uchar8)
TENSOR_TRANSCENDENTAL(Sin, U8,  F16, vxc_uchar8, vxc_uchar8, half4, vxc_half8,  vxc_short8)
TENSOR_TRANSCENDENTAL(Sin, I16, I16, vxc_short8, vxc_short8, int4,  vxc_short8, vxc_short8)
TENSOR_TRANSCENDENTAL(Sin, I16, F16, vxc_short8, vxc_short8, half4, vxc_half8,  vxc_short8)

#define TENSOR_TRANSCENDENTAL_2D(funcName, src_type_name, dst_type_name, src_type, \
        src_copy_type, convert_type, dst_type, dst_copy_type) \
    __kernel void vxTensor##funcName##_##src_type_name##to##dst_type_name##_2D( \
    __read_only  image2d_array_t  input, \
    __write_only image2d_array_t  output \
    ) \
{ \
    int2 coord = (int2)(get_global_id(0), get_global_id(1)); \
    src_type      src0; \
    src_copy_type src1; \
    VXC_ReadImage(src0, input, coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src1, src0, 16); \
 \
    float4 vecA; \
    float4 vecB; \
    VXC_DP4x4(vecA, src1, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniDatatoFp32Part0_4x4); \
    VXC_DP4x4(vecB, src1, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniDatatoFp32Part1_4x4); \
    vecA = vecA * inputScale + inputTail; \
    vecB = vecB * inputScale + inputTail; \
    vecA = funcName##_(vecA); \
    vecB = funcName##_(vecB); \
    vecA = vecA * outputScale + outputZP; \
    vecB = vecB * outputScale + outputZP; \
 \
    convert_type dst0, dst1; \
    _viv_asm(CONV_RTE, dst0, vecA); \
    _viv_asm(CONV_RTE, dst1, vecB); \
    dst_type dst2; \
    VXC_DP2x8(dst2, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1), uniExtract8Data_2x8); \
    dst_copy_type dst; \
    _viv_asm(COPY, dst, dst2, 16); \
    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
}
//SIN
TENSOR_TRANSCENDENTAL_2D(Sin, F16, F16, vxc_short8, vxc_half8, half4, vxc_half8,  vxc_short8)
TENSOR_TRANSCENDENTAL_2D(Sin, F16, I8,  vxc_short8, vxc_half8, int4,  vxc_char8,  vxc_char8)
TENSOR_TRANSCENDENTAL_2D(Sin, F16, U8,  vxc_short8, vxc_half8, int4,  vxc_uchar8, vxc_uchar8)
TENSOR_TRANSCENDENTAL_2D(Sin, F16, I16, vxc_short8, vxc_half8, int4,  vxc_short8, vxc_short8)
TENSOR_TRANSCENDENTAL_2D(Sin, I8,  I8,  vxc_char8,  vxc_char8,  int4,  vxc_char8,  vxc_char8)
TENSOR_TRANSCENDENTAL_2D(Sin, I8,  F16, vxc_char8,  vxc_char8,  half4, vxc_half8,  vxc_short8)
TENSOR_TRANSCENDENTAL_2D(Sin, U8,  U8,  vxc_uchar8, vxc_uchar8, int4,  vxc_uchar8, vxc_uchar8)
TENSOR_TRANSCENDENTAL_2D(Sin, U8,  F16, vxc_uchar8, vxc_uchar8, half4, vxc_half8,  vxc_short8)
TENSOR_TRANSCENDENTAL_2D(Sin, I16, I16, vxc_short8, vxc_short8, int4,  vxc_short8, vxc_short8)
TENSOR_TRANSCENDENTAL_2D(Sin, I16, F16, vxc_short8, vxc_short8, half4, vxc_half8,  vxc_short8)
