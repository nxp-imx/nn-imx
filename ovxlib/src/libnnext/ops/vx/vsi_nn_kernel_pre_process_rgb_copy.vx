#include "cl_viv_vx_ext.h"

_viv_uniform float outputScale;
_viv_uniform float outputZP;
_viv_uniform int r_order;
_viv_uniform int b_order;
_viv_uniform VXC_512Bits uniExtractR_2x8;
_viv_uniform VXC_512Bits uniExtractG_2x8;
_viv_uniform VXC_512Bits uniExtractB_2x8;

#define IMAGE_PRE_PROCESS_COPY_16BITS(dst_name, dst_type, copy_type) \
__kernel void vxRGBScaletoTensor_##dst_name##_copy \
    ( \
    __read_only image2d_array_t  input, \
    __write_only image2d_array_t output, \
         global int              *xRatio, \
         global int              *yRatio, \
         global int              *xOffset, \
         global int              *yOffset, \
                float            rMean, \
                float            gMean, \
                float            bMean, \
                float            f32Var, \
                int              reverse_channel, \
                int              trans \
    ) \
{ \
    int2 coord      = (int2)(get_global_id(0) * 3, get_global_id(1)); \
 \
    coord.xy += (int2) (*xOffset, *yOffset); \
    vxc_uchar16 src0, src1; \
    dst_type   dst0; \
    copy_type   dst; \
 \
    VXC_ReadImage(src0, input, coord.xy, 0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0)); \
    VXC_ReadImage(src1, input, coord.xy, VXC_5BITOFFSET_XY(15, 0), \
        VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0)); \
 \
    f32Var *= outputScale; \
    float4      paramData = (float4)(rMean * f32Var, gMean * f32Var, bMean * f32Var, f32Var); \
    half4 paramData_f16; \
    _viv_asm(CONV, paramData_f16, paramData); \
 \
    int4 coord_out = (int4)(get_global_id(0), get_global_id(1), r_order, 0); \
 \
    VXC_DP2x8(dst0, src0, paramData_f16, VXC_MODIFIER(0, 4, 0, VXC_RM_ToNearestEven, 1), uniExtractR_2x8); \
    VXC_DP2x8(dst0, src1, paramData_f16, VXC_MODIFIER(5, 7, 0, VXC_RM_ToNearestEven, 1), uniExtractR_2x8); \
    _viv_asm(COPY, dst, dst0, 16); \
    VXC_WriteImage2DArray(output, coord_out, dst, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
 \
    coord_out.z = 1; \
    VXC_DP2x8(dst0, src0, paramData_f16, VXC_MODIFIER(0, 4, 0, VXC_RM_ToNearestEven, 1), uniExtractG_2x8); \
    VXC_DP2x8(dst0, src1, paramData_f16, VXC_MODIFIER(5, 7, 0, VXC_RM_ToNearestEven, 1), uniExtractG_2x8); \
    _viv_asm(COPY, dst, dst0, 16); \
    VXC_WriteImage2DArray(output, coord_out, dst, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
 \
    coord_out.z = b_order; \
    VXC_DP2x8(dst0, src0, paramData_f16, VXC_MODIFIER(0, 4, 0, VXC_RM_ToNearestEven, 1), uniExtractB_2x8); \
    VXC_DP2x8(dst0, src1, paramData_f16, VXC_MODIFIER(5, 7, 0, VXC_RM_ToNearestEven, 1), uniExtractB_2x8); \
    _viv_asm(COPY, dst, dst0, 16); \
    VXC_WriteImage2DArray(output, coord_out, dst, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
}
IMAGE_PRE_PROCESS_COPY_16BITS(I16, vxc_short8,  vxc_short8)
IMAGE_PRE_PROCESS_COPY_16BITS(F16, vxc_half8,   vxc_short8)

#define IMAGE_PRE_PROCESS_COPY_8BITS(dst_name, dst_type) \
__kernel void vxRGBScaletoTensor_##dst_name##_copy \
    ( \
    __read_only image2d_array_t  input, \
    __write_only image2d_array_t output, \
         global int              *xRatio, \
         global int              *yRatio, \
         global int              *xOffset, \
         global int              *yOffset, \
                float            rMean, \
                float            gMean, \
                float            bMean, \
                float            f32Var, \
                int              reverse_channel, \
                int              trans \
    ) \
{ \
    int2 coord      = (int2)(get_global_id(0) * 3, get_global_id(1)); \
    coord.xy += (int2) (*xOffset, *yOffset); \
    vxc_uchar16 src0, src1; \
    dst_type dst; \
 \
    VXC_ReadImage(src0, input, coord.xy, 0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0)); \
    VXC_ReadImage(src1, input, coord.xy, VXC_5BITOFFSET_XY(15, 0), \
        VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0)); \
 \
    f32Var *= outputScale; \
    float4  paramData = (float4)(rMean * f32Var - outputZP, gMean * f32Var - outputZP, \
        bMean * f32Var - outputZP, f32Var); \
 \
    half4 paramData_f16; \
    _viv_asm(CONV, paramData_f16, paramData); \
 \
    int4 coord_out = (int4)(get_global_id(0), get_global_id(1), r_order, 0); \
 \
    VXC_DP2x8(dst, src0, paramData_f16, VXC_MODIFIER(0, 4, 0, VXC_RM_ToNearestEven, 1), uniExtractR_2x8); \
    VXC_DP2x8(dst, src1, paramData_f16, VXC_MODIFIER(5, 9, 0, VXC_RM_ToNearestEven, 1), uniExtractR_2x8); \
    VXC_WriteImage2DArray(output, coord_out, dst, VXC_MODIFIER(0, 9, 0, VXC_RM_TowardZero, 0)); \
 \
 \
    coord_out.z = 1; \
    VXC_DP2x8(dst, src0, paramData_f16, VXC_MODIFIER(0, 4, 0, VXC_RM_ToNearestEven, 1), uniExtractG_2x8); \
    VXC_DP2x8(dst, src1, paramData_f16, VXC_MODIFIER(5, 9, 0, VXC_RM_ToNearestEven, 1), uniExtractG_2x8); \
    VXC_WriteImage2DArray(output, coord_out, dst, VXC_MODIFIER(0, 9, 0, VXC_RM_TowardZero, 0)); \
 \
    coord_out.z = b_order; \
    VXC_DP2x8(dst, src0, paramData_f16, VXC_MODIFIER(0, 4, 0, VXC_RM_ToNearestEven, 1), uniExtractB_2x8); \
    VXC_DP2x8(dst, src1, paramData_f16, VXC_MODIFIER(5, 9, 0, VXC_RM_ToNearestEven, 1), uniExtractB_2x8); \
    VXC_WriteImage2DArray(output, coord_out, dst, VXC_MODIFIER(0, 9, 0, VXC_RM_TowardZero, 0)); \
}
IMAGE_PRE_PROCESS_COPY_8BITS(U8, vxc_uchar16)
IMAGE_PRE_PROCESS_COPY_8BITS(I8, vxc_char16)
