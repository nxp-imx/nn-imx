#include "cl_viv_vx_ext.h"

_viv_uniform VXC_512Bits poolingEncodeInt8_0_opt;
_viv_uniform VXC_512Bits poolingEncodeInt8_1_opt;
_viv_uniform VXC_512Bits poolingEncode_opt;
_viv_uniform VXC_512Bits uniQuantInOutInt16Even_4x4;
_viv_uniform VXC_512Bits uniQuantInOutInt8Even_2x8;

__kernel void poolingWithArgmaxInt8_Int8_opt
    (
        image2d_array_t tensorIn,
        image2d_array_t tensorOut,
        image2d_array_t axis,
        int type,
        int sizeX,
        int sizeY,
        int paddingX,
        int paddingY
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    vxc_char16 din0, din1;
    vxc_char16 maxDataVer, maxDataVer1;
    vxc_char16 din0EqualTmp, din1EqualTmp;
    vxc_uchar8 axisEncode;
    vxc_uchar8 axisOut;

    VXC_ReadImage2DArray(din0, tensorIn, coord, VXC_5BITOFFSET_XY(0, 0),\
        VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(din1, tensorIn, coord, VXC_5BITOFFSET_XY(0, 1),\
        VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    int4 coordOut = (int4)(coord.x >> 1, coord.y >> 1, coord.z, 0);
    VXC_VertMax3_Integer(maxDataVer, din0, din1, din1, VXC_MODIFIER_BIN(0, 15, 0));
    maxDataVer1 = maxDataVer.s1032547698badcfe;
    VXC_VertMax3_Integer(maxDataVer, maxDataVer1, maxDataVer, maxDataVer, VXC_MODIFIER_BIN(0, 15, 0));
    //maxDataVer1 = maxDataVer.s02468ace02468ace;//output
    VXC_DP2x8(maxDataVer1, maxDataVer, maxDataVer, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1),
        uniQuantInOutInt8Even_2x8);
    VXC_WriteImage2DArray(tensorOut, coordOut, maxDataVer1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    //get axis
    VXC_Clamp(din0EqualTmp, din0, maxDataVer, maxDataVer, VXC_MODIFIER_CLAMP(0, 15, 0, 1));
    VXC_Clamp(din1EqualTmp, din1, maxDataVer, maxDataVer, VXC_MODIFIER_CLAMP(0, 15, 0, 1));
    din0EqualTmp &= (vxc_char16)(1);
    din1EqualTmp &= (vxc_char16)(1);
    VXC_DP4x4(axisEncode, din0EqualTmp, din1EqualTmp, VXC_MODIFIER_BIN(0, 3, 0), poolingEncodeInt8_0_opt);
    VXC_DP4x4(axisEncode, din0EqualTmp, din1EqualTmp, VXC_MODIFIER_BIN(4, 7, 0), poolingEncodeInt8_1_opt);
    axisOut = clz(axisEncode);//output
    //write data out
    VXC_WriteImage2DArray(axis, coordOut, axisOut, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}

__kernel void poolingWithArgmaxInt16_s2k2p0_opt
    (
    image2d_array_t tensorIn,
    image2d_array_t tensorOut,
    image2d_array_t axis,
    int type,
    int sizeX,
    int sizeY,
    int paddingX,
    int paddingY
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    vxc_short8 din0, din1;
    vxc_short8 din0Fp16, din1Fp16;
    vxc_short8 maxDataVer, maxDataVer1;
    int4 bitExtractCoeff;
    vxc_short8 din0EqualTmp, din1EqualTmp;
    vxc_uchar8 din0Equal, din1Equal;
    vxc_uchar4 axisEncode;
    vxc_uchar4 axisOut;

    VXC_ReadImage2DArray(din0, tensorIn, coord, VXC_5BITOFFSET_XY(0, 0),\
        VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(din1, tensorIn, coord, VXC_5BITOFFSET_XY(0, 1),\
        VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    int4 coordOut = (int4)(coord.x >> 1, coord.y >> 1, coord.z, 0);
    _viv_asm(COPY, din0Fp16, din0, 16);
    _viv_asm(COPY, din1Fp16, din1, 16);
    VXC_VertMax3_Integer(maxDataVer, din0Fp16, din1Fp16, din1Fp16, VXC_MODIFIER_BIN(0, 7, 0));
    _viv_asm(COPY, din0, maxDataVer, 16);
    din1 = din0.s10325476;
    _viv_asm(COPY, maxDataVer1, din1, 16);
    VXC_VertMax3_Integer(maxDataVer, maxDataVer1, maxDataVer, maxDataVer, VXC_MODIFIER_BIN(0, 7, 0));
    _viv_asm(COPY, din0, maxDataVer, 16);
    //din1 = din0.s02460246;//output
    VXC_DP4x4(din1, din0, din0, VXC_MODIFIER(0, 3, 0, VXC_RM_ToNearestEven, 1),\
        uniQuantInOutInt16Even_4x4);
    VXC_WriteImage2DArray(tensorOut, coordOut, din1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));

    //get axis
    VXC_Clamp(din0EqualTmp, din0Fp16, maxDataVer, maxDataVer, VXC_MODIFIER_CLAMP(0, 7, 0, 1));
    VXC_Clamp(din1EqualTmp, din1Fp16, maxDataVer, maxDataVer, VXC_MODIFIER_CLAMP(0, 7, 0, 1));
    bitExtractCoeff = (int4)(0x30201000, 0x70605040, 0x01010101, 0x01010101);
    VXC_BitExtract(din0Equal, din0EqualTmp, din0EqualTmp, bitExtractCoeff, VXC_MODIFIER_BIN(0, 7, 0));
    VXC_BitExtract(din1Equal, din1EqualTmp, din1EqualTmp, bitExtractCoeff, VXC_MODIFIER_BIN(0, 7, 0));
    VXC_DP4x4(axisEncode, din0Equal, din1Equal, VXC_MODIFIER_BIN(0, 3, 0), poolingEncode_opt);
    axisOut = clz(axisEncode);//output

    //write data out
    VXC_WriteImage2DArray(axis, coordOut, axisOut, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
}

