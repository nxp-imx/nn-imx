#include "cl_viv_vx_ext.h"

_viv_uniform VXC_512Bits uniConvConditiontoDst_2x8;
_viv_uniform VXC_512Bits uniU8MulAndPostShift0_Lo_2x8;
_viv_uniform VXC_512Bits uniU8MulAndPostShift1_Lo_2x8;
_viv_uniform int2 multAndoutZP0;//[0:15] multiplier, [31:63] output zp
_viv_uniform int2 multAndoutZP1;//[0:15] multiplier, [31:63] output zp

#define SELECT_INT(type_name, read_fun, write_fun) \
    type_name src0, src1, dst, value; \
    vxc_char8 value_tmp; \
    vxc_ushort8 mp0, mp1; \
    _viv_asm(COPY, mp0, multAndoutZP0, 16); \
    _viv_asm(COPY, mp1, multAndoutZP1, 16); \
    read_fun(src0, input0, coord, VXC_5BITOFFSET_XY(0, 0), \
                VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    read_fun(src1, input1, coord, VXC_5BITOFFSET_XY(0, 0), \
                VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    VXC_DP2x8(src0, src0, mp0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0),\
             uniU8MulAndPostShift0_Lo_2x8); \
    VXC_DP2x8(src1, src1, mp1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0),\
             uniU8MulAndPostShift1_Lo_2x8); \
    read_fun(value_tmp, condition, coord, VXC_5BITOFFSET_XY(0, 0), \
                VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    VXC_DP2x8(value, value_tmp, value_tmp,\
             VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniConvConditiontoDst_2x8); \
    dst = (value != 0 ? src0 : src1); \
    write_fun(output, coord, dst, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

#define SELECT_INT_FUN(cond_name, src_name, dst_name, type_name) \
__kernel void select_##cond_name##_##src_name##_##src_name##to##dst_name( \
    __read_only  image2d_array_t   condition, \
    __read_only  image2d_array_t   input0, \
    __read_only  image2d_array_t   input1, \
    __write_only image2d_array_t   output) \
{ \
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0); \
    SELECT_INT(type_name, VXC_ReadImage2DArray, VXC_WriteImage2DArray) \
}

SELECT_INT_FUN(I8, I8,  I8,  vxc_char8)
SELECT_INT_FUN(I8, U8,  U8,  vxc_uchar8)
SELECT_INT_FUN(I8, I16, I16, vxc_short8)

#define SELECT_INT_FUN_2D(cond_name, src_name, dst_name, type_name) \
__kernel void select_##cond_name##_##src_name##_##src_name##to##dst_name##_2D( \
    __read_only  image2d_array_t   condition, \
    __read_only  image2d_array_t   input0, \
    __read_only  image2d_array_t   input1, \
    __write_only image2d_array_t   output) \
{ \
    int2 coord = (int2)(get_global_id(0), get_global_id(1)); \
    SELECT_INT(type_name, VXC_ReadImage, VXC_WriteImage) \
}

SELECT_INT_FUN_2D(I8, I8,  I8,  vxc_char8)
SELECT_INT_FUN_2D(I8, U8,  U8,  vxc_uchar8)
SELECT_INT_FUN_2D(I8, I16, I16, vxc_short8)

#define SELECT_HALF(read_fun, write_fun) \
    vxc_short8 src0, src1, dst, value; \
    vxc_char8 value_tmp; \
    read_fun(src0, input0, coord, VXC_5BITOFFSET_XY(0, 0), \
                VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    read_fun(src1, input1, coord, VXC_5BITOFFSET_XY(0, 0), \
                VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    read_fun(value_tmp, condition, coord, VXC_5BITOFFSET_XY(0, 0), \
                VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    VXC_DP2x8(value, value_tmp, value_tmp,\
             VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniConvConditiontoDst_2x8); \
    dst = (value != 0 ? src0 : src1); \
    write_fun(output, coord, dst, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

__kernel void select_I8_F16_F16toF16(
    __read_only  image2d_array_t   condition,
    __read_only  image2d_array_t   input0,
    __read_only  image2d_array_t   input1,
    __write_only image2d_array_t   output)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    SELECT_HALF(VXC_ReadImage2DArray, VXC_WriteImage2DArray)
}

__kernel void select_I8_F16_F16toF16_2D(
    __read_only  image2d_array_t   condition,
    __read_only  image2d_array_t   input0,
    __read_only  image2d_array_t   input1,
    __write_only image2d_array_t   output)
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    SELECT_HALF(VXC_ReadImage, VXC_WriteImage)
}
