#include "cl_viv_vx_ext.h"

_viv_uniform VXC_512Bits uniConvertDirInt16Fp32_4x4;
_viv_uniform VXC_512Bits uniConvertEndInt16Fp32_4x4;
_viv_uniform VXC_512Bits uniConvertInt32toUint8_2x8;

_viv_uniform VXC_512Bits uniConvertUint8SubZpToFp32_4x4;
_viv_uniform VXC_512Bits uniConvertSecUint8SubZpToFp32_4x4;
_viv_uniform VXC_512Bits uniConvertFstFp16Fp32_4x4;
_viv_uniform VXC_512Bits uniConvertSecFp16Fp32_4x4;
_viv_uniform VXC_512Bits uniConvertInt8FstFp32_4x4;
_viv_uniform VXC_512Bits uniConvertInt8SecFp32_4x4;

_viv_uniform float in_scale0;
_viv_uniform float in_scale1;
_viv_uniform float out_scale;
_viv_uniform int in_zp0;
_viv_uniform int in_zp1;
_viv_uniform int out_zp;

__kernel __attribute__((reqd_work_group_size(8, 1, 1))) void vxcTensorFloorDiv_Fp16(
    image2d_array_t input0,
    image2d_array_t input1,
    image2d_array_t output)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    vxc_short8 src0, src1;
    vxc_short8 dst;
    vxc_half8 data0, data1;
    VXC_ReadImage2DArray(src0, input0, coord, VXC_5BITOFFSET_XY(0, 0),
                VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, data0, src0, 16);
    VXC_ReadImage2DArray(src1, input1, coord, VXC_5BITOFFSET_XY(0, 0),
                VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, data1, src1, 16);

    float4 x0, x1;
    float4 y0, y1;
    float4 tmpDst0, tmpDst1;
    VXC_DP4x4(x0, data0, data0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertFstFp16Fp32_4x4);
    VXC_DP4x4(x1, data0, data0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertSecFp16Fp32_4x4);
    VXC_DP4x4(y0, data1, data1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertFstFp16Fp32_4x4);
    VXC_DP4x4(y1, data1, data1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertSecFp16Fp32_4x4);
    tmpDst0 = floor(x0/y0);
    tmpDst1 = floor(x1/y1);

    half4 tmpVal0, tmpVal1;
    _viv_asm(CONV, tmpVal0, tmpDst0);
    _viv_asm(CONV, tmpVal1, tmpDst1);
    VXC_DP2x8(dst, tmpVal0, tmpVal1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniConvertInt32toUint8_2x8);
    VXC_WriteImage2DArray(output, coord, dst, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}

__kernel __attribute__((reqd_work_group_size(8, 1, 1))) void vxcTensorFloorDiv_Int16(
    image2d_array_t input0,
    image2d_array_t input1,
    image2d_array_t output)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    vxc_short8 src0, src1;
    vxc_short8 dst;
    VXC_ReadImage2DArray(src0, input0, coord, VXC_5BITOFFSET_XY(0, 0),
                VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(src1, input1, coord, VXC_5BITOFFSET_XY(0, 0),
                VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    float4 x0, x1;
    float4 y0, y1;
    float4 tmpDst0, tmpDst1;
    float4 data0, data1;
    VXC_DP4x4(x0, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertDirInt16Fp32_4x4);
    VXC_DP4x4(x1, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertEndInt16Fp32_4x4);
    VXC_DP4x4(y0, src1, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertDirInt16Fp32_4x4);
    VXC_DP4x4(y1, src1, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertEndInt16Fp32_4x4);

    tmpDst0 = x0 * in_scale0 / (y0 * in_scale1);
    data0 = floor(tmpDst0) * out_scale;
    tmpDst1 = x1 * in_scale0 / (y1 * in_scale1);
    data1 = floor(tmpDst1) * out_scale;

    vxc_int4 tmpVal0, tmpVal1;
    tmpVal0 = convert_int4_rte(data0);
    tmpVal1 = convert_int4_rte(data1);
    VXC_DP2x8(dst, tmpVal0, tmpVal1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1), uniConvertInt32toUint8_2x8);
    VXC_WriteImage2DArray(output, coord, dst, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}

__kernel __attribute__((reqd_work_group_size(8, 1, 1))) void vxcTensorFloorDiv_Uint8(
    image2d_array_t input0,
    image2d_array_t input1,
    image2d_array_t output)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    vxc_uchar8 src0, src1;
    vxc_uchar8 dst;
    VXC_ReadImage2DArray(src0, input0, coord, VXC_5BITOFFSET_XY(0, 0),
                VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(src1, input1, coord, VXC_5BITOFFSET_XY(0, 0),
                VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    float4 x0, x1;
    float4 y0, y1;
    float4 tmpDst0, tmpDst1;
    float4 data0, data1;

    short zp0 = in_zp0;
    short zp1 = in_zp1;
    VXC_DP4x4(x0, src0, zp0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertUint8SubZpToFp32_4x4);
    VXC_DP4x4(x1, src0, zp0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertSecUint8SubZpToFp32_4x4);
    VXC_DP4x4(y0, src1, zp1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertUint8SubZpToFp32_4x4);
    VXC_DP4x4(y1, src1, zp1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertSecUint8SubZpToFp32_4x4);

    tmpDst0 = x0 * in_scale0 / (y0 * in_scale1);
    data0 = floor(tmpDst0) * out_scale;
    tmpDst1 = x1 * in_scale0 / (y1 * in_scale1);
    data1 = floor(tmpDst1) * out_scale;

    vxc_int4 tmpVal0, tmpVal1;
    tmpVal0 = convert_int4_rte(data0 + out_zp);
    tmpVal1 = convert_int4_rte(data1 + out_zp);

    VXC_DP2x8(dst, tmpVal0, tmpVal1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1), uniConvertInt32toUint8_2x8);
    VXC_WriteImage2DArray(output, coord, dst, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}

__kernel __attribute__((reqd_work_group_size(8, 1, 1))) void vxcTensorFloorDiv_Int8(
    image2d_array_t input0,
    image2d_array_t input1,
    image2d_array_t output)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    vxc_char8 src0, src1;
    vxc_char8 dst;
    VXC_ReadImage2DArray(src0, input0, coord, VXC_5BITOFFSET_XY(0, 0),
                VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(src1, input1, coord, VXC_5BITOFFSET_XY(0, 0),
                VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    float4 x0, x1;
    float4 y0, y1;
    float4 tmpDst0, tmpDst1;
    float4 data0, data1;
    VXC_DP4x4(x0, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertInt8FstFp32_4x4);
    VXC_DP4x4(x1, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertInt8SecFp32_4x4);
    VXC_DP4x4(y0, src1, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertInt8FstFp32_4x4);
    VXC_DP4x4(y1, src1, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertInt8SecFp32_4x4);

    tmpDst0 = x0 * in_scale0 / (y0 * in_scale1);
    data0 = floor(tmpDst0) * out_scale;
    tmpDst1 = x1 * in_scale0 / (y1 * in_scale1);
    data1 = floor(tmpDst1) * out_scale;

    vxc_int4 tmpVal0, tmpVal1;
    tmpVal0 = convert_int4_rte(data0);
    tmpVal1 = convert_int4_rte(data1);
    VXC_DP2x8(dst, tmpVal0, tmpVal1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1), uniConvertInt32toUint8_2x8);
    VXC_WriteImage2DArray(output, coord, dst, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}
