#include "cl_viv_vx_ext.h"

_viv_uniform VXC_512Bits uniExtact8Bit_2x8;
_viv_uniform float2 scale_xy;
_viv_uniform int depth;
_viv_uniform VXC_512Bits uniConvertI32toI16_2x8;
_viv_uniform VXC_512Bits uniGetMaskShift_2x8;
_viv_uniform VXC_512Bits uniConvertDFP2FP32_part1_4x4;
_viv_uniform VXC_512Bits uniConvertDFP2FP32_4x4;
_viv_uniform float dfpScale;
_viv_uniform float half_pixel_value;

__kernel void resize_bilinear_I8toI8_UP
    (
    image2d_array_t input,
    image2d_array_t output,
    int   align_corners,
    int   half_pixel_centers
    )
{
    int4 coord_out  =  (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    int4   coord_x     = coord_out.xxxx + (int4)(0, 1, 2, 3);
    float4 in_x        = (convert_float4(coord_x) + half_pixel_value) * scale_xy.xxxx - half_pixel_value;

    float4 left_x_f    = floor(in_x);
    float4 x_lerp      = in_x - left_x_f;
    int4   left_x_idx  = convert_int4(left_x_f);
    float4 right_x_f   = ceil(in_x);
    int4   right_x_idx = convert_int4(right_x_f);

    float  in_y        = (convert_float(coord_out.y) + half_pixel_value) * scale_xy.y - half_pixel_value;

    float  top_y_f     = floor(in_y);
    float  y_lerp      = in_y - top_y_f;
    int    top_y_idx   = convert_int(top_y_f);
    float  bottom_y_f  = ceil(in_y);
    int    bottom_y_idx= convert_int(bottom_y_f);

    vxc_uchar16 src0, src1, dst0, dst1;

    vxc_char16 top;
    vxc_char16 bottom;

    int4 coord_in = (int4)(left_x_idx.x, top_y_idx, coord_out.z, 0);

    VXC_ReadImage2DArray(src0, input, coord_in, \
    VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

    coord_in.y = bottom_y_idx;
    VXC_ReadImage2DArray(src1, input, coord_in, \
    VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

    vxc_ushort8 bitextract_p0;
    vxc_uchar16 maskShift = {8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8};
    VXC_DP2x8(bitextract_p0, left_x_idx, right_x_idx, \
    VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniConvertI32toI16_2x8);
    vxc_ushort8 constData = 8;
    VXC_DP2x8(maskShift, bitextract_p0, constData, \
    VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniGetMaskShift_2x8);

    do
    {
        VXC_BitExtract(dst0, src0, src0, maskShift, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
        VXC_BitExtract(dst1, src1, src1, maskShift, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
        _viv_asm(COPY, top, dst0, 16);
        _viv_asm(COPY, bottom, dst1, 16);

        coord_in.z ++;
        coord_in.y = top_y_idx;
        VXC_ReadImage2DArray(src0, input, coord_in, \
        VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
        coord_in.y = bottom_y_idx;
        VXC_ReadImage2DArray(src1, input, coord_in, \
        VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

        float4 left4;
        float4 right4;
        float4 top4;
        float4 bottom4;

        VXC_DP4x4(left4, top, top, \
        VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertDFP2FP32_4x4);
        VXC_DP4x4(right4, top, top, \
        VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertDFP2FP32_part1_4x4);

        top4        = right4 * x_lerp + left4;

        VXC_DP4x4(left4, bottom, bottom, \
        VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertDFP2FP32_4x4);
        VXC_DP4x4(right4, bottom, bottom, \
        VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertDFP2FP32_part1_4x4);

        bottom4      = right4 * x_lerp + left4;
        bottom4     -= top4;
        float4 dst4  = bottom4 * y_lerp + top4;
        dst4         = dst4 * dfpScale;
        int4 dst     = convert_int4_rte(dst4);
        VXC_DP2x8(top, dst, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_ToNearestEven, 1), uniExtact8Bit_2x8);
        VXC_WriteImage2DArray(output, coord_out, top, VXC_MODIFIER(0, 3, 0,VXC_RM_TowardZero, 0));

        coord_out.z ++;
    } while (coord_in.z < depth);
}

__kernel void resize_bilinear_I8toI8_DOWN
    (
    image2d_array_t input,
    image2d_array_t output,
    int   align_corners,
    int   half_pixel_centers
    )
{
    int4 coord_out  =  (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    int4   coord_x     = coord_out.xxxx + (int4)(0, 1, 2, 3);
    float4 in_x        = (convert_float4(coord_x) + half_pixel_value) * scale_xy.xxxx - half_pixel_value;

    float4 left_x_f    = floor(in_x);
    float4 x_lerp      = in_x - left_x_f;
    int4   left_x_idx  = convert_int4(left_x_f);
    float4 right_x_f   = ceil(in_x);
    int4   right_x_idx = convert_int4(right_x_f);

    float  in_y        = (convert_float(coord_out.y) + half_pixel_value) * scale_xy.y - half_pixel_value;

    float  top_y_f     = floor(in_y);
    float  y_lerp      = in_y - top_y_f;
    int    top_y_idx   = convert_int(top_y_f);
    float  bottom_y_f  = ceil(in_y);
    int    bottom_y_idx= convert_int(bottom_y_f);

    vxc_char16 top_left, top_right;
    vxc_char16 bottom_left, bottom_right;

    int4 coord_in = (int4)(left_x_idx.x, top_y_idx, coord_out.z, 0);

    VXC_ReadImage2DArray(top_left, input, coord_in, \
    VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.y;
    VXC_ReadImage2DArray(top_left, input, coord_in, \
    VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.z;
    VXC_ReadImage2DArray(top_left, input, coord_in, \
    VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.w;
    VXC_ReadImage2DArray(top_left, input, coord_in, \
    VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));

    coord_in.x = right_x_idx.x;
    VXC_ReadImage2DArray(top_right, input, coord_in, \
    VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.y;
    VXC_ReadImage2DArray(top_right, input, coord_in, \
    VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.z;
    VXC_ReadImage2DArray(top_right, input, coord_in, \
    VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.w;
    VXC_ReadImage2DArray(top_right, input, coord_in, \
    VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));

    coord_in.y = bottom_y_idx;
    coord_in.x = left_x_idx.x;
    VXC_ReadImage2DArray(bottom_left, input, coord_in, \
    VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.y;
    VXC_ReadImage2DArray(bottom_left, input, coord_in, \
    VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.z;
    VXC_ReadImage2DArray(bottom_left, input, coord_in, \
    VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.w;
    VXC_ReadImage2DArray(bottom_left, input, coord_in, \
    VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));

    coord_in.x = right_x_idx.x;
    VXC_ReadImage2DArray(bottom_right, input, coord_in, \
    VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.y;
    VXC_ReadImage2DArray(bottom_right, input, coord_in, \
    VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.z;
    VXC_ReadImage2DArray(bottom_right, input, coord_in, \
    VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.w;
    VXC_ReadImage2DArray(bottom_right, input, coord_in, \
    VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));

    float4 left4;
    float4 right4;
    float4 top4;
    float4 bottom4;

    VXC_DP4x4(left4, top_left, top_left, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertDFP2FP32_4x4);
    VXC_DP4x4(right4, top_right, top_right, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertDFP2FP32_4x4);

    right4      -= left4;
    top4        = right4 * x_lerp + left4;

    VXC_DP4x4(left4, bottom_left, bottom_left, \
    VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertDFP2FP32_4x4);
    VXC_DP4x4(right4, bottom_right, bottom_right, \
    VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertDFP2FP32_4x4);

    right4      -= left4;
    bottom4      = right4 * x_lerp + left4;

    bottom4     -= top4;
    float4 dst4  = bottom4 * y_lerp + top4;

    dst4         = dst4 * dfpScale;

    int4 dst     = convert_int4_rte(dst4);

    VXC_DP2x8(top_left, dst, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_ToNearestEven, 1), uniExtact8Bit_2x8);
    VXC_WriteImage2DArray(output, coord_out, top_left, VXC_MODIFIER(0, 3, 0,VXC_RM_TowardZero, 0));
}
