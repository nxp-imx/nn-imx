#include "cl_viv_vx_ext.h"

/**************************instancenorm int8***************************/
_viv_uniform int width;
_viv_uniform int height;
_viv_uniform float dimRatio;
_viv_uniform VXC_512Bits uniInt16SumSqr_dp8x2;
_viv_uniform VXC_512Bits UniFP16toFP32Lo4_dp4x4;
_viv_uniform VXC_512Bits uniConvertInt32toUint8_2x8;

_viv_uniform VXC_512Bits uniConvertDirInt8Fp32_4x4;
_viv_uniform VXC_512Bits uniConvertEndInt8Fp32_4x4;
_viv_uniform VXC_512Bits uniConvertTrdInt8Fp32_4x4;
_viv_uniform VXC_512Bits uniConvertFthInt8Fp32_4x4;
_viv_uniform VXC_512Bits uniSumInt8_16x1;
_viv_uniform VXC_512Bits uniSqrSumInt8_16x1;
_viv_uniform float input_fl_scale;
_viv_uniform float output_fl_Scale;
_viv_uniform float inFlScale_s2;

__kernel __attribute__((reqd_work_group_size(16, 1, 1))) void vxcInstanceNorm_int8(
    image2d_array_t input,
    image2d_array_t bias,
    image2d_array_t scale,
    image2d_array_t output,
    image2d_array_t meanVari,
              float eps)
{
    int4 coord = (int4)(0, 0, get_global_id(2), 0);
    vxc_char16 src0, src2;
    vxc_short8 src1;
    vxc_half8 scale_h;
    float sum = 0, sqr = 0, scale_vari, bias_val;
    vxc_float4 bias_f, scale_f;
    int tmpSum = 0, tmpSqr = 0;
    int tmpSum1;
    int tmpSqr1;
    vxc_float4  tmpData0, tmpData1, tmpData2, tmpData3;

    for(coord.y = 0; coord.y < height; coord.y++)
    {
        tmpSqr = 0;
        for(coord.x = 0; coord.x < width; coord.x += 16)
        {
            VXC_ReadImage2DArray(src0, input, coord, VXC_5BITOFFSET_XY(0, 0),
                VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
            VXC_DP16x1(tmpSum1, src0, src0,\
                VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0), uniSumInt8_16x1);
            tmpSum += (tmpSum1);
            VXC_DP16x1(tmpSqr1, src0, src0,\
                VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0), uniSqrSumInt8_16x1);
            tmpSqr += (tmpSqr1);
        }
        sqr += (tmpSqr * inFlScale_s2);
    }
    sum = tmpSum * input_fl_scale;

    coord.w = 0;
    VXC_ReadImage(src1, scale, coord.zw, VXC_5BITOFFSET_XY(0, 0),\
        VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, scale_h, src1, 16);
    VXC_DP4x4(scale_f, scale_h, scale_h, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        UniFP16toFP32Lo4_dp4x4);

    bias_f = read_imagef(bias, coord.zwww);
    bias_val = bias_f.s0 * output_fl_Scale; // bias_f.s0

    float mean, vari;
    mean = sum * dimRatio;
    vari = sqr*dimRatio - mean*mean;
    vari += eps;
    vari = rsqrt(vari);
    scale_vari = scale_f.s0 * vari * output_fl_Scale;
    //scale_f.s0 * vari, output_fl_Scale for i8&i16

    vxc_int4 tmpVal0, tmpVal1;

    for(coord.y = 0; coord.y < height; coord.y++)
    {
        for(coord.x = 0; coord.x < width; coord.x += 16)
        {
            VXC_ReadImage2DArray(src0, input, coord, VXC_5BITOFFSET_XY(0, 0),
                VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

            VXC_DP4x4(tmpData0, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
                uniConvertDirInt8Fp32_4x4);
            VXC_DP4x4(tmpData1, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
                uniConvertEndInt8Fp32_4x4);
            VXC_DP4x4(tmpData2, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
                uniConvertTrdInt8Fp32_4x4);
            VXC_DP4x4(tmpData3, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
                uniConvertFthInt8Fp32_4x4);
            tmpData0 *= input_fl_scale;
            tmpData1 *= input_fl_scale;
            tmpData2 *= input_fl_scale;
            tmpData3 *= input_fl_scale;

            vxc_float4 norm;
            tmpData0 -= mean;
            norm = scale_vari * tmpData0 + bias_val;
            tmpVal0 = convert_int4_rte(norm);

            tmpData1 -= mean;
            norm = scale_vari * tmpData1 + bias_val;
            tmpVal1 = convert_int4_rte(norm);
            VXC_DP2x8(src2, tmpVal0, tmpVal1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1),
                uniConvertInt32toUint8_2x8);

            tmpData2 -= mean;
            norm = scale_vari * tmpData2 + bias_val;
            tmpVal0 = convert_int4_rte(norm);

            tmpData3 -= mean;
            norm = scale_vari * tmpData3 + bias_val;
            tmpVal1 = convert_int4_rte(norm);
            VXC_DP2x8(src2, tmpVal0, tmpVal1, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1),
                uniConvertInt32toUint8_2x8);
            VXC_WriteImage2DArray(output, coord, src2, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
        }
    }
}

__kernel __attribute__((reqd_work_group_size(16, 1, 1))) void vxcInstanceNormInt8_fp16(
    image2d_array_t input,
    image2d_array_t bias,
    image2d_array_t scale,
    image2d_array_t output,
    image2d_array_t meanVari,
              float eps)
{
    int4 coord = (int4)(0, 0, get_global_id(2), 0);
    vxc_char16 src0;
    vxc_short8 src1;
    vxc_half8 scale_h;
    float sum = 0, sqr = 0, scale_vari, bias_val;
    vxc_float4 bias_f, scale_f;
    int tmpSum = 0, tmpSqr = 0;
    int tmpSum1;
    int tmpSqr1;
    vxc_float4  tmpData0, tmpData1, tmpData2, tmpData3;

    for(coord.y = 0; coord.y < height; coord.y++)
    {
        tmpSqr = 0;
        for(coord.x = 0; coord.x < width; coord.x += 16)
        {
            VXC_ReadImage2DArray(src0, input, coord, VXC_5BITOFFSET_XY(0, 0),
                VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
            VXC_DP16x1(tmpSum1, src0, src0, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0), uniSumInt8_16x1);
            tmpSum += (tmpSum1);
            VXC_DP16x1(tmpSqr1, src0, src0, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0), uniSqrSumInt8_16x1);
            tmpSqr += (tmpSqr1);
        }
        sqr += (tmpSqr * inFlScale_s2);
    }
    sum = tmpSum * input_fl_scale;

    coord.w = 0;
    VXC_ReadImage(src1, scale, coord.zw, VXC_5BITOFFSET_XY(0, 0),\
        VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, scale_h, src1, 16);
    VXC_DP4x4(scale_f, scale_h, scale_h, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        UniFP16toFP32Lo4_dp4x4);

    bias_f = read_imagef(bias, coord.zwww);
    bias_val = bias_f.s0;

    float mean, vari;
    mean = sum * dimRatio;
    vari = sqr*dimRatio - mean*mean;
    vari += eps;
    vari = rsqrt(vari);
    scale_vari = scale_f.s0 * vari;
    vxc_short8 outval;
    half4 tmpVal0, tmpVal1;

    for(coord.y = 0; coord.y < height; coord.y++)
    {
        for(coord.x = 0; coord.x < width; coord.x += 16)
        {
            int4 coord_out = coord;
            VXC_ReadImage2DArray(src0, input, coord, VXC_5BITOFFSET_XY(0, 0),
                VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

            VXC_DP4x4(tmpData0, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
                uniConvertDirInt8Fp32_4x4);
            VXC_DP4x4(tmpData1, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
                uniConvertEndInt8Fp32_4x4);
            VXC_DP4x4(tmpData2, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
                uniConvertTrdInt8Fp32_4x4);
            VXC_DP4x4(tmpData3, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
                uniConvertFthInt8Fp32_4x4);
            tmpData0 *= input_fl_scale;
            tmpData1 *= input_fl_scale;
            tmpData2 *= input_fl_scale;
            tmpData3 *= input_fl_scale;

            vxc_float4 norm;
            tmpData0 -= mean;
            norm = scale_vari * tmpData0 + bias_val;
            _viv_asm(CONV, tmpVal0, norm);

            tmpData1 -= mean;
            norm = scale_vari * tmpData1 + bias_val;
            _viv_asm(CONV, tmpVal1, norm);
            VXC_DP2x8(outval, tmpVal0, tmpVal1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0),
                uniConvertInt32toUint8_2x8);
            VXC_WriteImage2DArray(output, coord_out, outval,\
                VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
            coord_out.x += 8;

            tmpData2 -= mean;
            norm = scale_vari * tmpData2 + bias_val;
            _viv_asm(CONV, tmpVal0, norm);

            tmpData3 -= mean;
            norm = scale_vari * tmpData3 + bias_val;
            _viv_asm(CONV, tmpVal1, norm);
            VXC_DP2x8(outval, tmpVal0, tmpVal1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0),
                uniConvertInt32toUint8_2x8);
            VXC_WriteImage2DArray(output, coord_out, outval, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
        }
    }
}

_viv_uniform VXC_512Bits uniConvertInt16Fp32Fst_4x4;
_viv_uniform VXC_512Bits uniConvertInt16Fp32Secd_4x4;
_viv_uniform VXC_512Bits uniConvertInt32toInt16_2x8;

__kernel __attribute__((reqd_work_group_size(16, 1, 1))) void vxcInstanceNorm_int16(
    image2d_array_t input,
    image2d_array_t bias,
    image2d_array_t scale,
    image2d_array_t output,
    image2d_array_t meanVari,
              float eps)
{
    int4 coord = (int4)(0, 0, get_global_id(2), 0);
    vxc_short8 src0, src1, src2;
    float sum = 0, sqr = 0, scale_vari, bias_val;
    vxc_half8 scale_h;
    vxc_float4 bias_f, scale_f;
    vxc_int4 sumsqr;
    int tmpSum = 0;
    int tmpSqr = 0;

    for(coord.y = 0; coord.y < height; coord.y++)
    {
        tmpSqr = 0;
        for(coord.x = 0; coord.x < width; coord.x += 8)
        {
            VXC_ReadImage2DArray(src0, input, coord, VXC_5BITOFFSET_XY(0, 0),
                VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
            VXC_DP8x2(sumsqr, src0, src0, VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0),\
                uniInt16SumSqr_dp8x2);
            tmpSum += sumsqr.x;
            tmpSqr += sumsqr.y;
        }
        sqr += (tmpSqr * inFlScale_s2);
    }
    sum = tmpSum * input_fl_scale;

    coord.w = 0;
    VXC_ReadImage(src1, scale, coord.zw, VXC_5BITOFFSET_XY(0, 0),\
        VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    bias_f = read_imagef(bias, coord.zwww);
    _viv_asm(COPY, scale_h, src1, 16);
    VXC_DP4x4(scale_f, scale_h, scale_h, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        UniFP16toFP32Lo4_dp4x4);
    bias_val = bias_f.s0 * output_fl_Scale;

    float mean, vari;
    mean = sum * dimRatio;
    vari = sqr*dimRatio - mean*mean;
    vari += eps;
    vari = rsqrt(vari);
    scale_vari = scale_f.s0 * vari * output_fl_Scale;

    vxc_float4 tmpVal0, tmpVal1;
    vxc_int4 tmpData0, tmpData1;

    for(coord.y = 0; coord.y < height; coord.y++)
    {
        for(coord.x = 0; coord.x < width; coord.x += 8)
        {
            VXC_ReadImage2DArray(src0, input, coord, VXC_5BITOFFSET_XY(0, 0),
                VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
            VXC_DP4x4(tmpVal0, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
                uniConvertInt16Fp32Fst_4x4);
            VXC_DP4x4(tmpVal1, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
                uniConvertInt16Fp32Secd_4x4);
            tmpVal0 *= input_fl_scale;
            tmpVal1 *= input_fl_scale;

            vxc_float4 sub, norm;

            sub = tmpVal0 - mean;
            norm = scale_vari * sub + bias_val;
            tmpData0 = convert_int4_rte(norm);

            sub = tmpVal1 - mean;
            norm = scale_vari * sub + bias_val;
            tmpData1 = convert_int4_rte(norm);

            VXC_DP2x8(src2, tmpData0, tmpData1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1),
                uniConvertInt32toInt16_2x8);
            VXC_WriteImage2DArray(output, coord, src2, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
        }
    }
}

__kernel __attribute__((reqd_work_group_size(16, 1, 1))) void vxcInstanceNormInt16_fp16(
    image2d_array_t input,
    image2d_array_t bias,
    image2d_array_t scale,
    image2d_array_t output,
    image2d_array_t meanVari,
              float eps)
{
    int4 coord = (int4)(0, 0, get_global_id(2), 0);
    vxc_short8 src0, src1, src2;
    float sum = 0, sqr = 0, scale_vari, bias_val;
    vxc_half8 in_h, scale_h;
    vxc_float4 bias_f, scale_f;
    vxc_int4 sumsqr;
    int tmpSum = 0;
    int tmpSqr = 0;

    for(coord.y = 0; coord.y < height; coord.y++)
    {
        tmpSqr = 0;
        for(coord.x = 0; coord.x < width; coord.x += 8)
        {
            VXC_ReadImage2DArray(src0, input, coord, VXC_5BITOFFSET_XY(0, 0),
                VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
            VXC_DP8x2(sumsqr, src0, src0, VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0),\
                uniInt16SumSqr_dp8x2);
            tmpSum += sumsqr.x;
            tmpSqr += sumsqr.y;
        }
        sqr += (tmpSqr * inFlScale_s2);
    }
    sum = tmpSum * input_fl_scale;

    coord.w = 0;
    VXC_ReadImage(src1, scale, coord.zw, VXC_5BITOFFSET_XY(0, 0),\
        VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    bias_f = read_imagef(bias, coord.zwww);
    _viv_asm(COPY, scale_h, src1, 16);
    VXC_DP4x4(scale_f, scale_h, scale_h, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        UniFP16toFP32Lo4_dp4x4);
    bias_val = bias_f.s0;

    float mean, vari;
    mean = sum * dimRatio;
    vari = sqr*dimRatio - mean*mean;
    vari += eps;
    vari = rsqrt(vari);
    scale_vari = scale_f.s0 * vari;

    vxc_float4 tmpVal0, tmpVal1;

    for(coord.y = 0; coord.y < height; coord.y++)
    {
        for(coord.x = 0; coord.x < width; coord.x += 8)
        {
            VXC_ReadImage2DArray(src0, input, coord, VXC_5BITOFFSET_XY(0, 0),
                VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
            VXC_DP4x4(tmpVal0, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
                uniConvertInt16Fp32Fst_4x4);
            VXC_DP4x4(tmpVal1, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
                uniConvertInt16Fp32Secd_4x4);
            tmpVal0 *= input_fl_scale;
            tmpVal1 *= input_fl_scale;

            vxc_float4 sub, norm;
            half4 norm_h0, norm_h1;

            sub = tmpVal0 - mean;
            norm = scale_vari * sub + bias_val;
            _viv_asm(CONV, norm_h0, norm);

            sub = tmpVal1 - mean;
            norm = scale_vari * sub + bias_val;
            _viv_asm(CONV, norm_h1, norm);

            VXC_DP2x8(src2, norm_h0, norm_h1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0),\
                uniConvertInt32toUint8_2x8);
            VXC_WriteImage2DArray(output, coord, src2, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
        }
    }
}


