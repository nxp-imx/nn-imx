#include "cl_viv_vx_ext.h"

//-------------------max pooling with argmax---------------
_viv_uniform VXC_512Bits poolingEncode;

__kernel void poolingWithArgmax
    (
    image2d_array_t tensorIn,
    image2d_array_t tensorOut,
    image2d_array_t axis,
    int type,
    int sizeX,
    int sizeY,
    int paddingX,
    int paddingY
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    vxc_short8 din0, din1;
    vxc_half8 din0Fp16, din1Fp16;
    vxc_half8 maxDataVer, maxDataVer1;
    int4 bitExtractCoeff;
    vxc_half8 din0EqualTmp, din1EqualTmp;
    vxc_uchar8 din0Equal, din1Equal;
    vxc_uchar4 axisEncode;
    vxc_uchar4 axisOut;

    VXC_ReadImage2DArray(din0, tensorIn, coord, VXC_5BITOFFSET_XY(0, 0),\
        VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(din1, tensorIn, coord, VXC_5BITOFFSET_XY(0, 1),\
        VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    int4 coordOut = (int4)(coord.x >> 1, coord.y >> 1, coord.z, 0);
    _viv_asm(COPY, din0Fp16, din0, 16);
    _viv_asm(COPY, din1Fp16, din1, 16);
    VXC_VertMax3_Half(maxDataVer, din0Fp16, din1Fp16, din1Fp16, VXC_MODIFIER_BIN(0, 7, 0));
    _viv_asm(COPY, din0, maxDataVer, 16);
    din1 = din0.s10325476;
    _viv_asm(COPY, maxDataVer1, din1, 16);
    VXC_VertMax3_Half(maxDataVer, maxDataVer1, maxDataVer, maxDataVer, VXC_MODIFIER_BIN(0, 7, 0));
    _viv_asm(COPY, din0, maxDataVer, 16);
    din1 = din0.s02460246;//output
    //get axis
    VXC_Clamp_Half(din0EqualTmp, din0Fp16, maxDataVer, maxDataVer, VXC_MODIFIER_CLAMP(0, 7, 0, 1));
    VXC_Clamp_Half(din1EqualTmp, din1Fp16, maxDataVer, maxDataVer, VXC_MODIFIER_CLAMP(0, 7, 0, 1));
    bitExtractCoeff = (int4)(0x30201000, 0x70605040, 0x01010101, 0x01010101);
    VXC_BitExtract(din0Equal, din0EqualTmp, din0EqualTmp, bitExtractCoeff, VXC_MODIFIER_BIN(0, 7, 0));
    VXC_BitExtract(din1Equal, din1EqualTmp, din1EqualTmp, bitExtractCoeff, VXC_MODIFIER_BIN(0, 7, 0));
    VXC_DP4x4(axisEncode, din0Equal, din1Equal, VXC_MODIFIER_BIN(0, 3, 0), poolingEncode);
    axisOut = clz(axisEncode);//output
    //write data out
    VXC_WriteImage2DArray(tensorOut, coordOut, din1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    VXC_WriteImage2DArray(axis, coordOut, axisOut, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
}

//-------------------max pooling with argmax uint8---------------

_viv_uniform int input_ZP;
_viv_uniform int output_ZP;
_viv_uniform float inputScale;
_viv_uniform float outputScale;
_viv_uniform VXC_512Bits uniConvertUint8ToFp32_4x4;
_viv_uniform VXC_512Bits uniConvertSubZpUint8Fp32_4x4;
_viv_uniform VXC_512Bits uniPackHalf2Short_2x8;
_viv_uniform VXC_512Bits uniExtractHalf2Short_2x8;
_viv_uniform VXC_512Bits uniPackHalf8_2x8;
_viv_uniform VXC_512Bits uniU8EvenBinSubZP_MulM_2x8;
_viv_uniform VXC_512Bits uniEncodeUint8_4x8;
_viv_uniform VXC_512Bits uniS16AddOutZP_2x8;
_viv_uniform vxc_uint4 packed_outputZP;

__kernel void poolingWithArgmaxUint8_s2k2p0
    (
    image2d_array_t tensorIn,
    image2d_array_t tensorOut,
    image2d_array_t axis,
    int type,
    int sizeX,
    int sizeY,
    int paddingX,
    int paddingY
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    vxc_uchar16 din0, din1;
    vxc_uchar16 maxDataVer, maxDataVer1;
    int4 bitExtractCoeff;
    vxc_uchar16 din0EqualTmp, din1EqualTmp;
    vxc_uchar8 axisEncode;
    vxc_uchar8 axisOut;

    VXC_ReadImage2DArray(din0, tensorIn, coord, VXC_5BITOFFSET_XY(0, 0),\
        VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(din1, tensorIn, coord, VXC_5BITOFFSET_XY(0, 1),\
        VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    int4 coordOut = (int4)(coord.x >> 1, coord.y >> 1, coord.z, 0);
    VXC_VertMax3_Integer(maxDataVer, din0, din1, din1, VXC_MODIFIER_BIN(0, 15, 0));
    maxDataVer1 = maxDataVer.s1032547698badcfe;
    VXC_VertMax3_Integer(maxDataVer, maxDataVer1, maxDataVer, maxDataVer, VXC_MODIFIER_BIN(0, 15, 0));

    vxc_short8 tmp;
    uchar zp = input_ZP;
    VXC_DP2x8(tmp, maxDataVer, zp, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1),\
        uniU8EvenBinSubZP_MulM_2x8);
    vxc_uchar16 packed_outZP;
    _viv_asm(COPY, packed_outZP, packed_outputZP, 16);
    VXC_DP2x8(maxDataVer1, tmp, packed_outZP, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1),\
        uniS16AddOutZP_2x8);
    VXC_WriteImage2DArray(tensorOut, coordOut, maxDataVer1,\
        VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    //get axis
    VXC_Clamp(din0EqualTmp, din0, maxDataVer, maxDataVer, VXC_MODIFIER_CLAMP(0, 15, 0, 1));
    VXC_Clamp(din1EqualTmp, din1, maxDataVer, maxDataVer, VXC_MODIFIER_CLAMP(0, 15, 0, 1));
    din0EqualTmp &= (vxc_uchar16)(1);
    din1EqualTmp &= (vxc_uchar16)(1);

    VXC_DP4x8(axisEncode, din0EqualTmp, din1EqualTmp, VXC_MODIFIER_BIN(0, 7, 0), uniEncodeUint8_4x8);
    axisOut = clz(axisEncode);//output
    //write data out
    VXC_WriteImage2DArray(axis, coordOut, axisOut, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}

_viv_uniform VXC_512Bits uniConvertEvenU8ToFp32_4x4;
_viv_uniform VXC_512Bits uniConvertEvenU8SubZpToFp32_4x4;

__kernel void poolingWithArgmaxUint8_fp16_s2k2p0
    (
    image2d_array_t tensorIn,
    image2d_array_t tensorOut,
    image2d_array_t axis,
    int type,
    int sizeX,
    int sizeY,
    int paddingX,
    int paddingY
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    vxc_uchar16 din0, din1;
    vxc_uchar16 maxDataVer, maxDataVer1;
    int4 bitExtractCoeff;
    vxc_uchar16 din0EqualTmp, din1EqualTmp;
    vxc_uchar8 axisEncode;
    vxc_uchar8 axisOut;
    vxc_short8 result;

    VXC_ReadImage2DArray(din0, tensorIn, coord, VXC_5BITOFFSET_XY(0, 0),\
        VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(din1, tensorIn, coord, VXC_5BITOFFSET_XY(0, 1),\
        VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    int4 coordOut = (int4)(coord.x >> 1, coord.y >> 1, coord.z, 0);
    VXC_VertMax3_Integer(maxDataVer, din0, din1, din1, VXC_MODIFIER_BIN(0, 15, 0));
    maxDataVer1 = maxDataVer.s1032547698badcfe;
    VXC_VertMax3_Integer(maxDataVer, maxDataVer1, maxDataVer,\
        maxDataVer, VXC_MODIFIER_BIN(0, 15, 0));
    //maxDataVer1 = maxDataVer.s02468ace02468ace;//output

    vxc_float4 tmpVal0, tmpVal1, tmpVal2, tmpVal3;
    half4 tmpOut0, tmpOut1;
    vxc_half8 tmpPack;
    vxc_short4 tmpOut2, tmpOut3;
    uchar zp = input_ZP;
    VXC_DP4x4(tmpVal0, maxDataVer, zp, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvertEvenU8ToFp32_4x4);
    VXC_DP4x4(tmpVal2, maxDataVer, zp, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvertEvenU8SubZpToFp32_4x4);
    tmpVal1 = tmpVal0 * inputScale;
    _viv_asm(CONV, tmpOut0, tmpVal1);
    //_viv_asm(COPY, tmpOut2, tmpOut0, 8);
    tmpVal3 = tmpVal2 * inputScale;
    _viv_asm(CONV, tmpOut1, tmpVal3);
    //_viv_asm(COPY, tmpOut3, tmpOut1, 8);
    //VXC_DP2x8(result, tmpOut2, tmpOut3, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0),\
        uniPackHalf2Short_2x8);
    //VXC_DP2x8(result, tmpOut2, tmpOut3, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0),\
        uniExtractHalf2Short_2x8);
    VXC_DP2x8(tmpPack, tmpOut0, tmpOut1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0),\
        uniPackHalf8_2x8);
    _viv_asm(COPY, result, tmpPack, 16);
    VXC_WriteImage2DArray(tensorOut, coordOut, result,\
        VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    //get axis
    VXC_Clamp(din0EqualTmp, din0, maxDataVer, maxDataVer, VXC_MODIFIER_CLAMP(0, 15, 0, 1));
    VXC_Clamp(din1EqualTmp, din1, maxDataVer, maxDataVer, VXC_MODIFIER_CLAMP(0, 15, 0, 1));
    din0EqualTmp &= (vxc_uchar16)(1);
    din1EqualTmp &= (vxc_uchar16)(1);
    VXC_DP4x8(axisEncode, din0EqualTmp, din1EqualTmp, VXC_MODIFIER_BIN(0, 7, 0), uniEncodeUint8_4x8);
    axisOut = clz(axisEncode);//output

    //write data out
    VXC_WriteImage2DArray(axis, coordOut, axisOut, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}

__kernel void poolingWithArgmaxUint8_fp16_fp16_s2k2p0
    (
    image2d_array_t tensorIn,
    image2d_array_t tensorOut,
    image2d_array_t axis,
    int type,
    int sizeX,
    int sizeY,
    int paddingX,
    int paddingY
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    vxc_uchar16 din0, din1;
    vxc_uchar16 maxDataVer, maxDataVer1;
    int4 bitExtractCoeff;
    vxc_uchar16 din0EqualTmp, din1EqualTmp;
    vxc_uchar8 axisEncode;
    vxc_uchar8 axisOut;
    vxc_short8 result, axisResult;

    VXC_ReadImage2DArray(din0, tensorIn, coord, VXC_5BITOFFSET_XY(0, 0),\
        VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(din1, tensorIn, coord, VXC_5BITOFFSET_XY(0, 1),\
        VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    int4 coordOut = (int4)(coord.x >> 1, coord.y >> 1, coord.z, 0);
    VXC_VertMax3_Integer(maxDataVer, din0, din1, din1, VXC_MODIFIER_BIN(0, 15, 0));
    maxDataVer1 = maxDataVer.s1032547698badcfe;
    VXC_VertMax3_Integer(maxDataVer, maxDataVer1, maxDataVer, maxDataVer, VXC_MODIFIER_BIN(0, 15, 0));
    maxDataVer1 = maxDataVer.s02468ace02468ace;//output

    vxc_float4 tmpVal0, tmpVal1, tmpVal2, tmpVal3;
    half4 tmpOut0, tmpOut1;
    vxc_half8 tmpPack;
    vxc_short4 tmpOut2, tmpOut3;
    uchar zp = input_ZP;
    VXC_DP4x4(tmpVal0, maxDataVer1, zp, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvertUint8ToFp32_4x4);
    VXC_DP4x4(tmpVal2, maxDataVer1, zp, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvertSubZpUint8Fp32_4x4);
    tmpVal1 = tmpVal0 * inputScale;
    _viv_asm(CONV, tmpOut0, tmpVal1);
    //_viv_asm(COPY, tmpOut2, tmpOut0, 8);
    tmpVal3 = tmpVal2 * inputScale;
    _viv_asm(CONV, tmpOut1, tmpVal3);
    //_viv_asm(COPY, tmpOut3, tmpOut1, 8);
    //VXC_DP2x8(result, tmpOut2, tmpOut3, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0),\
        uniPackHalf2Short_2x8);
    //VXC_DP2x8(result, tmpOut2, tmpOut3, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0),\
        uniExtractHalf2Short_2x8);
    VXC_DP2x8(tmpPack, tmpOut0, tmpOut1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0),\
        uniPackHalf8_2x8);
    _viv_asm(COPY, result, tmpPack, 16);

    VXC_Clamp(din0EqualTmp, din0, maxDataVer, maxDataVer, VXC_MODIFIER_CLAMP(0, 15, 0, 1));
    VXC_Clamp(din1EqualTmp, din1, maxDataVer, maxDataVer, VXC_MODIFIER_CLAMP(0, 15, 0, 1));
    din0EqualTmp &= (vxc_uchar16)(1);
    din1EqualTmp &= (vxc_uchar16)(1);
    VXC_DP4x8(axisEncode, din0EqualTmp, din1EqualTmp, VXC_MODIFIER_BIN(0, 7, 0), uniEncodeUint8_4x8);
    axisOut = clz(axisEncode);//output
    _viv_asm(CONV, axisResult, axisOut);

    //write data out
    VXC_WriteImage2DArray(tensorOut, coordOut, result, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_WriteImage2DArray(axis, coordOut, axisResult, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}

