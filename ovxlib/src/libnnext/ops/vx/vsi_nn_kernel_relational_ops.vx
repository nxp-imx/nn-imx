#include "cl_viv_vx_ext.h"

_viv_uniform VXC_512Bits uniConvertFstFp16Fp32_4x4;
_viv_uniform VXC_512Bits uniConvertSecFp16Fp32_4x4;
_viv_uniform VXC_512Bits uniConvertInt32toUint8_2x8;

#if 0
__kernel __attribute__((reqd_work_group_size(8, 1, 1))) void vxcTensorRelation_Gt_Int16(
    image2d_array_t input0,
    image2d_array_t input1,
    image2d_array_t output)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    vxc_short8 src0, src1;
    vxc_short8 tmpDst;
    vxc_short8 dst;
    VXC_ReadImage2DArray(src0, input0, coord, VXC_5BITOFFSET_XY(0, 0),
                VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(src1, input1, coord, VXC_5BITOFFSET_XY(0, 0),
                VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    //dst = isgreater(src0, src1);
    dst = src0 > src1;
    VXC_WriteImage2DArray(output, coord, dst, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}
#endif

#define TENSORRELATION(name0, name1, input_type, copy_type, output_type, out_copy_type, cmp_op) \
    __kernel void vxcTensorRelation_##name0##_##name1( \
    __read_only  image2d_array_t in0, \
    __read_only  image2d_array_t in1, \
    __write_only image2d_array_t output) \
{\
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);\
    input_type vA;\
    copy_type  src0;\
    input_type vB;\
    copy_type  src1;\
    VXC_ReadImage2DArray(vA,in0,coord,VXC_5BITOFFSET_XY(0,0),VXC_MODIFIER(0,7,0,VXC_RM_TowardZero,0));\
    _viv_asm(COPY, src0, vA, 16); \
    VXC_ReadImage2DArray(vB,in1,coord,VXC_5BITOFFSET_XY(0,0),VXC_MODIFIER(0,7,0,VXC_RM_TowardZero,0));\
    _viv_asm(COPY, src1, vB, 16); \
    output_type dst; \
    dst = (src0)cmp_op(src1); \
    out_copy_type data; \
    _viv_asm(COPY, data, dst, 16); \
    VXC_WriteImage2DArray(output, coord, data, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
}
//             name0, name1, input_type, copy_type, output_type, out_copy_type, cmp_op
TENSORRELATION(Gt,    Int8,  vxc_char8,  vxc_char8,  vxc_char8,  vxc_char8,  >)
TENSORRELATION(Gte,   Int8,  vxc_char8, vxc_char8,  vxc_char8,  vxc_char8,  >=)
TENSORRELATION(Ls,    Int8,  vxc_char8, vxc_char8,  vxc_char8,  vxc_char8,  <)
TENSORRELATION(Lse,   Int8,  vxc_char8, vxc_char8,  vxc_char8,  vxc_char8,  <=)
TENSORRELATION(Ne,    Int8,  vxc_char8, vxc_char8,  vxc_char8,  vxc_char8,  !=)
TENSORRELATION(E,     Int8,  vxc_char8, vxc_char8,  vxc_char8,  vxc_char8,  ==)

TENSORRELATION(Gt,    Uint8,  vxc_uchar8,  vxc_uchar8,  vxc_char8,  vxc_uchar8,  >)
TENSORRELATION(Gte,   Uint8,  vxc_uchar8, vxc_uchar8,  vxc_char8,  vxc_uchar8,  >=)
TENSORRELATION(Ls,    Uint8,  vxc_uchar8, vxc_uchar8,  vxc_char8,  vxc_uchar8,  <)
TENSORRELATION(Lse,   Uint8,  vxc_uchar8, vxc_uchar8,  vxc_char8,  vxc_uchar8,  <=)
TENSORRELATION(Ne,    Uint8,  vxc_uchar8, vxc_uchar8,  vxc_char8,  vxc_uchar8,  !=)
TENSORRELATION(E,     Uint8,  vxc_uchar8, vxc_uchar8,  vxc_char8,  vxc_uchar8,  ==)

TENSORRELATION(Gt,    Int16,  vxc_short8, vxc_short8,  vxc_short8,  vxc_short8,  >)
TENSORRELATION(Gte,   Int16,  vxc_short8, vxc_short8,  vxc_short8,  vxc_short8,  >=)
TENSORRELATION(Ls,    Int16,  vxc_short8, vxc_short8,  vxc_short8,  vxc_short8,  <)
TENSORRELATION(Lse,   Int16,  vxc_short8, vxc_short8,  vxc_short8,  vxc_short8,  <=)
TENSORRELATION(Ne,    Int16,  vxc_short8, vxc_short8,  vxc_short8,  vxc_short8,  !=)
TENSORRELATION(E,     Int16,  vxc_short8, vxc_short8,  vxc_short8,  vxc_short8,  ==)

_viv_uniform VXC_512Bits uniMulShortMinus1toFp16_2x8;

#define TENSORCMPHALF(name0, name1, cmp_op) \
    __kernel void vxcTensorRelation_##name0##_##name1( \
    __read_only  image2d_array_t in0, \
    __read_only  image2d_array_t in1, \
    __write_only image2d_array_t output) \
{\
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);\
    vxc_short8 vA;\
    vxc_half8  src0;\
    vxc_short8 vB;\
    vxc_half8  src1;\
    VXC_ReadImage2DArray(vA,in0,coord,VXC_5BITOFFSET_XY(0,0),VXC_MODIFIER(0,7,0,VXC_RM_TowardZero,0));\
    _viv_asm(COPY, src0, vA, 16); \
    VXC_ReadImage2DArray(vB,in1,coord,VXC_5BITOFFSET_XY(0,0),VXC_MODIFIER(0,7,0,VXC_RM_TowardZero,0));\
    _viv_asm(COPY, src1, vB, 16); \
    vxc_float4 x0, x1; \
    vxc_float4 y0, y1; \
    VXC_DP4x4(x0, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertFstFp16Fp32_4x4); \
    VXC_DP4x4(x1, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertSecFp16Fp32_4x4); \
    VXC_DP4x4(y0, src1, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertFstFp16Fp32_4x4); \
    VXC_DP4x4(y1, src1, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertSecFp16Fp32_4x4); \
    vxc_int4 dst0, dst1; \
    dst0 = (x0)cmp_op(y0); \
    dst1 = (x1)cmp_op(y1); \
    vxc_short8 dst; \
    VXC_DP2x8(dst,dst0,dst1,VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0),uniConvertInt32toUint8_2x8);\
    vxc_half8 tmpOut; \
    VXC_DP2x8(tmpOut,dst,dst,VXC_MODIFIER(0,7,0,VXC_RM_TowardZero, 0),uniMulShortMinus1toFp16_2x8); \
    _viv_asm(COPY, dst, tmpOut, 16); \
    VXC_WriteImage2DArray(output, coord, dst, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
}

//          name0, name1, input_type, copy_type, output_type, out_copy_type, cmp_op
TENSORCMPHALF(Gt,    Fp16,  >)
TENSORCMPHALF(Gte,   Fp16,  >=)
TENSORCMPHALF(Ls,    Fp16,  <)
TENSORCMPHALF(Lse,   Fp16,  <=)
TENSORCMPHALF(Ne,    Fp16,  !=)
TENSORCMPHALF(E,     Fp16,  ==)