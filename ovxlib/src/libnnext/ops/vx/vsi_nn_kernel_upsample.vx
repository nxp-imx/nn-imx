#include "cl_viv_vx_ext.h"

//--------------------------unpooling-------------------------
_viv_uniform VXC_512Bits uniConvertDirInt16Fp32_4x4;
_viv_uniform VXC_512Bits uniConvertEndInt16Fp32_4x4;
_viv_uniform VXC_512Bits uniConvertInt32toInt16_2x8;

_viv_uniform float inScaleInt16;
_viv_uniform float scaleSF;
_viv_uniform VXC_512Bits ucharMulShort_8x8;

__kernel void unpooling
    (
        image2d_array_t dataIn,
        image2d_array_t axis,
        image2d_array_t dataOut,
        unsigned int sizeX,
        unsigned int sizeY
    )
{
    vxc_short4 din;
    vxc_uchar4 axisIn;
    vxc_short8 dinExp;
    vxc_uchar8 axisInExp;
    vxc_uchar8 constAxis;
    vxc_uchar8 axisData;
    vxc_short8 dout;

    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    VXC_ReadImage2DArray(din, dataIn, coord, VXC_5BITOFFSET_XY(0, 0),\
        VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(axisIn, axis, coord, VXC_5BITOFFSET_XY(0, 0),\
        VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    int4 coordOut = (int4)(coord.x << 1, coord.y << 1, coord.z, 0);
    dinExp = din.s00112233;
    axisInExp = axisIn.s00112233;

    constAxis = (vxc_uchar8)(0, 1, 0, 1, 0, 1, 0, 1);
    VXC_Clamp(axisData, axisInExp, constAxis, constAxis, VXC_MODIFIER_CLAMP(0, 7, 0, 1));
    axisData &= (vxc_uchar8)(1);
    VXC_DP2x8(dout, axisData, dinExp, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), ucharMulShort_8x8);
    //dout = (axisData == constAxis) ? dinExp : constZeros;
    VXC_WriteImage2DArray(dataOut, coordOut, dout, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    constAxis = (vxc_uchar8)(2, 3, 2, 3, 2, 3, 2, 3);
    VXC_Clamp(axisData, axisInExp, constAxis, constAxis, VXC_MODIFIER_CLAMP(0, 7, 0, 1));
    axisData &= (vxc_uchar8)(1);
    VXC_DP2x8(dout, axisData, dinExp, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), ucharMulShort_8x8);
    coordOut.y += 1;
    VXC_WriteImage2DArray(dataOut, coordOut, dout, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}

__kernel void unpoolingInt16_Int16
    (
        image2d_array_t dataIn,
        image2d_array_t axis,
        image2d_array_t dataOut,
        unsigned int sizeX,
        unsigned int sizeY
    )
{
    vxc_short4 din;
    vxc_uchar4 axisIn;
    vxc_short8 dinExp;
    vxc_uchar8 axisInExp;
    vxc_uchar8 constAxis;
    vxc_uchar8 axisData;
    vxc_short8 dout;

    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    VXC_ReadImage2DArray(din, dataIn, coord, VXC_5BITOFFSET_XY(0, 0),\
        VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(axisIn, axis, coord, VXC_5BITOFFSET_XY(0, 0),\
        VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    int4 coordOut = (int4)(coord.x << 1, coord.y << 1, coord.z, 0);
    dinExp = din.s00112233;
    axisInExp = axisIn.s00112233;
    constAxis = (vxc_uchar8)(0, 1, 0, 1, 0, 1, 0, 1);
    VXC_Clamp(axisData, axisInExp, constAxis, constAxis, VXC_MODIFIER_CLAMP(0, 7, 0, 1));
    axisData &= (vxc_uchar8)(1);
    VXC_DP2x8(dout, axisData, dinExp, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), ucharMulShort_8x8);
    //dout = (axisData == constAxis) ? dinExp : constZeros;
    vxc_float4 tmpVal0, tmpVal1, tmpVal2, tmpVal3;
    vxc_int4 tmpOut0, tmpOut1;
    VXC_DP4x4(tmpVal0, dout, dout, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvertDirInt16Fp32_4x4);
    VXC_DP4x4(tmpVal2, dout, dout, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvertEndInt16Fp32_4x4);
    tmpVal1 = tmpVal0 * scaleSF;
    tmpOut0 = convert_int4_rte(tmpVal1);
    tmpVal3 = tmpVal2 * scaleSF;
    tmpOut1 = convert_int4_rte(tmpVal3);
    VXC_DP2x8(dout, tmpOut0, tmpOut1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1),\
        uniConvertInt32toInt16_2x8);
    VXC_WriteImage2DArray(dataOut, coordOut, dout, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    constAxis = (vxc_uchar8)(2, 3, 2, 3, 2, 3, 2, 3);
    VXC_Clamp(axisData, axisInExp, constAxis, constAxis, VXC_MODIFIER_CLAMP(0, 7, 0, 1));
    axisData &= (vxc_uchar8)(1);
    VXC_DP2x8(dout, axisData, dinExp, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), ucharMulShort_8x8);

    VXC_DP4x4(tmpVal0, dout, dout, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvertDirInt16Fp32_4x4);
    VXC_DP4x4(tmpVal2, dout, dout, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvertEndInt16Fp32_4x4);
    tmpVal1 = tmpVal0 * scaleSF;
    tmpOut0 = convert_int4_rte(tmpVal1);
    tmpVal3 = tmpVal2 * scaleSF;
    tmpOut1 = convert_int4_rte(tmpVal3);
    VXC_DP2x8(dout, tmpOut0, tmpOut1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1),\
        uniConvertInt32toInt16_2x8);
    coordOut.y += 1;
    VXC_WriteImage2DArray(dataOut, coordOut, dout, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}

__kernel void unpoolingInt16_Int16_axI16
    (
        image2d_array_t dataIn,
        image2d_array_t axis,
        image2d_array_t dataOut,
        unsigned int sizeX,
        unsigned int sizeY
    )
{
    vxc_short4 din;
    vxc_short4 axisIn;
    vxc_short8 dinExp;
    vxc_short8 axisInExp;
    vxc_short8 constAxis;
    vxc_short8 axisData;
    vxc_short8 dout;

    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    VXC_ReadImage2DArray(din, dataIn, coord, VXC_5BITOFFSET_XY(0, 0),\
        VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(axisIn, axis, coord, VXC_5BITOFFSET_XY(0, 0),\
        VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    int4 coordOut = (int4)(coord.x << 1, coord.y << 1, coord.z, 0);
    dinExp = din.s00112233;
    axisInExp = axisIn.s00112233;
    constAxis = (vxc_short8)(0, 1, 0, 1, 0, 1, 0, 1);
    VXC_Clamp(axisData, axisInExp, constAxis, constAxis, VXC_MODIFIER_CLAMP(0, 7, 0, 1));
    axisData &= (vxc_short8)(1);
    VXC_DP2x8(dout, axisData, dinExp, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), ucharMulShort_8x8);
    //dout = (axisData == constAxis) ? dinExp : constZeros;
    vxc_float4 tmpVal0, tmpVal1, tmpVal2, tmpVal3;
    vxc_int4 tmpOut0, tmpOut1;
    VXC_DP4x4(tmpVal0, dout, dout, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvertDirInt16Fp32_4x4);
    VXC_DP4x4(tmpVal2, dout, dout, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvertEndInt16Fp32_4x4);
    tmpVal1 = tmpVal0 * scaleSF;
    tmpOut0 = convert_int4_rte(tmpVal1);
    tmpVal3 = tmpVal2 * scaleSF;
    tmpOut1 = convert_int4_rte(tmpVal3);
    VXC_DP2x8(dout, tmpOut0, tmpOut1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1),\
        uniConvertInt32toInt16_2x8);
    VXC_WriteImage2DArray(dataOut, coordOut, dout, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    constAxis = (vxc_short8)(2, 3, 2, 3, 2, 3, 2, 3);
    VXC_Clamp(axisData, axisInExp, constAxis, constAxis, VXC_MODIFIER_CLAMP(0, 7, 0, 1));
    axisData &= (vxc_short8)(1);
    VXC_DP2x8(dout, axisData, dinExp, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), ucharMulShort_8x8);
    VXC_DP4x4(tmpVal0, dout, dout, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvertDirInt16Fp32_4x4);
    VXC_DP4x4(tmpVal2, dout, dout, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvertEndInt16Fp32_4x4);
    tmpVal1 = tmpVal0 * scaleSF;
    tmpOut0 = convert_int4_rte(tmpVal1);
    tmpVal3 = tmpVal2 * scaleSF;
    tmpOut1 = convert_int4_rte(tmpVal3);
    VXC_DP2x8(dout, tmpOut0, tmpOut1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1),\
        uniConvertInt32toInt16_2x8);
    coordOut.y += 1;
    VXC_WriteImage2DArray(dataOut, coordOut, dout, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}

__kernel void unpoolingInt16_Fp16_axI16
    (
        image2d_array_t dataIn,
        image2d_array_t axis,
        image2d_array_t dataOut,
        unsigned int sizeX,
        unsigned int sizeY
    )
{
    vxc_short4 din;
    vxc_short4 axisIn;
    vxc_short8 dinExp;
    vxc_short8 axisInExp;
    vxc_short8 constAxis;
    vxc_short8 axisData;
    vxc_short8 dout;

    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    VXC_ReadImage2DArray(din, dataIn, coord, VXC_5BITOFFSET_XY(0, 0),\
        VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(axisIn, axis, coord, VXC_5BITOFFSET_XY(0, 0),\
        VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    int4 coordOut = (int4)(coord.x << 1, coord.y << 1, coord.z, 0);
    dinExp = din.s00112233;
    axisInExp = axisIn.s00112233;

    constAxis = (vxc_short8)(0, 1, 0, 1, 0, 1, 0, 1);
    VXC_Clamp(axisData, axisInExp, constAxis, constAxis, VXC_MODIFIER_CLAMP(0, 7, 0, 1));
    axisData &= (vxc_short8)(1);
    VXC_DP2x8(dout, axisData, dinExp, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0),\
        ucharMulShort_8x8);
    //dout = (axisData == constAxis) ? dinExp : constZeros;
    vxc_float4 tmpVal0, tmpVal1, tmpVal2, tmpVal3;
    half4 tmpOut0, tmpOut1;
    VXC_DP4x4(tmpVal0, dout, dout, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvertDirInt16Fp32_4x4);
    VXC_DP4x4(tmpVal2, dout, dout, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvertEndInt16Fp32_4x4);
    tmpVal1 = tmpVal0 * inScaleInt16;
    _viv_asm(CONV, tmpOut0, tmpVal1);
    tmpVal3 = tmpVal2 * inScaleInt16;
    _viv_asm(CONV, tmpOut1, tmpVal3);
    VXC_DP2x8(dout, tmpOut0, tmpOut1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0),\
        uniConvertInt32toInt16_2x8);
    VXC_WriteImage2DArray(dataOut, coordOut, dout, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    constAxis = (vxc_short8)(2, 3, 2, 3, 2, 3, 2, 3);
    VXC_Clamp(axisData, axisInExp, constAxis, constAxis, VXC_MODIFIER_CLAMP(0, 7, 0, 1));
    axisData &= (vxc_short8)(1);
    VXC_DP2x8(dout, axisData, dinExp, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), ucharMulShort_8x8);
    VXC_DP4x4(tmpVal0, dout, dout, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvertDirInt16Fp32_4x4);
    VXC_DP4x4(tmpVal2, dout, dout, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvertEndInt16Fp32_4x4);
    tmpVal1 = tmpVal0 * inScaleInt16;
    _viv_asm(CONV, tmpOut0, tmpVal1);
    tmpVal3 = tmpVal2 * inScaleInt16;
    _viv_asm(CONV, tmpOut1, tmpVal3);
    VXC_DP2x8(dout, tmpOut0, tmpOut1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0),\
        uniConvertInt32toInt16_2x8);
    coordOut.y += 1;
    VXC_WriteImage2DArray(dataOut, coordOut, dout, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}
