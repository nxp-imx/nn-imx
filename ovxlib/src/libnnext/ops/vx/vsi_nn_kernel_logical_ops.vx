#include "cl_viv_vx_ext.h"

#if 0
__kernel void vxcTensorLogical_or_int8(
    __read_only image2d_array_t   input0,
    __read_only image2d_array_t   input1,
    __write_only image2d_array_t  output)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    vxc_char8 src0, src1;
    vxc_char8 dst;
    VXC_ReadImage2DArray(src0, input0, coord, VXC_5BITOFFSET_XY(0, 0),
                VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(src1, input1, coord, VXC_5BITOFFSET_XY(0, 0),
                VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    dst = src0 || src1;
    VXC_WriteImage2DArray(output, coord, dst, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}
#endif

#if 1
#define TENSORLOGICAL(name0, name1, input_type, copy_type, output_type, out_copy_type, lgc_op) \
    __kernel void vxcTensorLogical_##name0##_##name1( \
    __read_only  image2d_array_t in0, \
    __read_only  image2d_array_t in1, \
    __write_only image2d_array_t output) \
{\
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);\
    input_type vA;\
    copy_type  src0;\
    input_type vB;\
    copy_type  src1;\
    VXC_ReadImage2DArray(vA,in0,coord,VXC_5BITOFFSET_XY(0,0),VXC_MODIFIER(0,7,0,VXC_RM_TowardZero,0));\
    _viv_asm(COPY, src0, vA, 16); \
    VXC_ReadImage2DArray(vB,in1,coord,VXC_5BITOFFSET_XY(0,0),VXC_MODIFIER(0,7,0,VXC_RM_TowardZero,0));\
    _viv_asm(COPY, src1, vB, 16); \
    output_type dst; \
    dst = (src0)lgc_op(src1); \
    out_copy_type data; \
    _viv_asm(COPY, data, dst, 16); \
    VXC_WriteImage2DArray(output, coord, data, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
}
//             name0, name1, input_type, copy_type, output_type, out_copy_type, lgc_op
TENSORLOGICAL(or,    int8,   vxc_char8,   vxc_char8,   vxc_char8,   vxc_char8,   ||)
TENSORLOGICAL(or,    uint8,  vxc_uchar8,  vxc_uchar8,  vxc_char8,   vxc_uchar8,  ||)
TENSORLOGICAL(or,    int16,  vxc_short8,  vxc_short8,  vxc_short8,  vxc_short8,  ||)
//TENSORLOGICAL(or,    fp16,   vxc_short8,  vxc_half8,   vxc_short8,  vxc_short8,  ||)
#endif
