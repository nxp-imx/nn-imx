#include "cl_viv_vx_ext.h"

_viv_uniform VXC_512Bits ucharMulShort_8x8_2;
_viv_uniform VXC_512Bits shortMulShort_8x8;
_viv_uniform VXC_512Bits uniConvertFstFp16Fp32_4x4;
_viv_uniform VXC_512Bits uniConvertSecFp16Fp32_4x4;
_viv_uniform int upOutput_ZP;
_viv_uniform float upOutput_Scale;
_viv_uniform float reUpOutScale_u8;
_viv_uniform float up_outFlScale_i8;
_viv_uniform float up_outFlScale_i16;
_viv_uniform VXC_512Bits uniConvertInt32toUint8_2x8;

_viv_uniform VXC_512Bits uniF16MulMultipiler_PostShft_2x8;
_viv_uniform VXC_512Bits uniS16AddOutZP_2x8;
_viv_uniform vxc_uint4 packed_outputZP;
__kernel void unpoolingFp16_Uint8
    (
        image2d_array_t dataIn,
        image2d_array_t axis,
        image2d_array_t dataOut,
        unsigned int sizeX,
        unsigned int sizeY
    )
{
    vxc_short8 din0;
    vxc_uchar16 din;
    vxc_uchar8 axisIn;
    vxc_half8 src;

    vxc_uchar16 dinExpand;
    vxc_uchar16 axisInExpand;
    vxc_uchar16 constAxis;
    vxc_uchar16 axisData;
    vxc_uchar16 axisData1;
    vxc_uchar16 dout;

    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    VXC_ReadImage2DArray(din0, dataIn, coord, VXC_5BITOFFSET_XY(0, 0),\
        VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(axisIn, axis, coord, VXC_5BITOFFSET_XY(0, 0),\
        VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    int4 coordOut = (int4)(coord.x << 1, coord.y << 1, coord.z, 0);

    vxc_short8 tmp;
    uchar zp = 0;
    _viv_asm(COPY, src, din0, 16);
    VXC_DP2x8(tmp, src, src, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1),\
        uniF16MulMultipiler_PostShft_2x8);
    vxc_uchar16 packed_outZP;
    _viv_asm(COPY, packed_outZP, packed_outputZP, 16);
    VXC_DP2x8(din, tmp, packed_outZP, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1),\
        uniS16AddOutZP_2x8);


    constAxis      = (vxc_uchar16)(0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1);
    dinExpand    = din.s0011223344556677;
    axisInExpand = axisIn.s0011223344556677;
    VXC_Clamp(axisData, axisInExpand, constAxis, constAxis, VXC_MODIFIER_CLAMP(0, 15, 0, 1));
    axisData &= (vxc_uchar16)(1);
    _viv_asm(COPY, axisData1, axisData, 16);
    dout = axisData1 * dinExpand;
    VXC_WriteImage2DArray(dataOut, coordOut, dout, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

    constAxis = (vxc_uchar16)(2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3);
    VXC_Clamp(axisData, axisInExpand, constAxis, constAxis, VXC_MODIFIER_CLAMP(0, 15, 0, 1));
    axisData &= (vxc_uchar16)(1);
    _viv_asm(COPY, axisData1, axisData, 16);
    dout = axisData1 * dinExpand;  //output
    coordOut.y += 1;
    VXC_WriteImage2DArray(dataOut, coordOut, dout, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
}

__kernel void unpoolingFp16Fp16_Uint8
    (
        image2d_array_t dataIn,
        image2d_array_t axis,
        image2d_array_t dataOut,
        unsigned int sizeX,
        unsigned int sizeY
    )
{
    vxc_short4 din;
    vxc_short4 axisIn;
    vxc_short8 dinExp, axisInExp, constAxis,axisData,tmpout;
    vxc_half8 dout;
    vxc_float4 tmpVal1, tmpVal2, convZp;
    vxc_int4 tmpData1, tmpData2, tmpData3;
    vxc_uchar8 result;

    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    VXC_ReadImage2DArray(din, dataIn, coord, VXC_5BITOFFSET_XY(0, 0),
        VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(axisIn, axis, coord, VXC_5BITOFFSET_XY(0, 0),
        VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    int4 coordOut = (int4)(coord.x << 1, coord.y << 1, coord.z, 0);
    dinExp = din.s00112233;
    axisInExp = axisIn.s00112233;

    constAxis = (vxc_short8)(0, 1, 0, 1, 0, 1, 0, 1);
    VXC_Clamp(axisData, axisInExp, constAxis, constAxis, VXC_MODIFIER_CLAMP(0, 7, 0, 1));
    axisData &= (vxc_short8)(1);
    VXC_DP2x8(tmpout, axisData, dinExp, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), shortMulShort_8x8);
    _viv_asm(COPY, dout, tmpout, 16);
    VXC_DP4x4(tmpVal1, dout, dout, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertFstFp16Fp32_4x4);
    VXC_DP4x4(tmpVal2, dout, dout, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertSecFp16Fp32_4x4);
    tmpVal1 /= upOutput_Scale;
    tmpVal2 /= upOutput_Scale;
    tmpData3 = isnotequal(tmpVal1, 0);
    tmpData3 *= (-upOutput_ZP);
    convZp = convert_float4_rtp(tmpData3);
    tmpVal1 += convZp;
    tmpData3 = isnotequal(tmpVal2, 0);
    tmpData3 *= (-upOutput_ZP);
    convZp = convert_float4_rtp(tmpData3);
    tmpVal2 += convZp;
    tmpData1 = convert_int4_rte(tmpVal1);
    tmpData2 = convert_int4_rte(tmpVal2);
    VXC_DP2x8(result, tmpData1, tmpData2, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1),
        uniConvertInt32toUint8_2x8);
    VXC_WriteImage2DArray(dataOut, coordOut, result, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    constAxis = (vxc_short8)(2, 3, 2, 3, 2, 3, 2, 3);
    VXC_Clamp(axisData, axisInExp, constAxis, constAxis, VXC_MODIFIER_CLAMP(0, 7, 0, 1));
    axisData &= (vxc_short8)(1);
    VXC_DP2x8(tmpout, axisData, dinExp, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), shortMulShort_8x8);
    _viv_asm(COPY, dout, tmpout, 16);
    VXC_DP4x4(tmpVal1, dout, dout, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertFstFp16Fp32_4x4);
    VXC_DP4x4(tmpVal2, dout, dout, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertSecFp16Fp32_4x4);
    tmpVal1 /= upOutput_Scale;
    tmpVal2 /= upOutput_Scale;
    tmpData3 = isnotequal(tmpVal1, 0);
    tmpData3 *= (-upOutput_ZP);
    convZp = convert_float4_rtp(tmpData3);
    tmpVal1 += convZp;
    tmpData3 = isnotequal(tmpVal2, 0);
    tmpData3 *= (-upOutput_ZP);
    convZp = convert_float4_rtp(tmpData3);
    tmpVal2 += convZp;
    tmpData1 = convert_int4_rte(tmpVal1);
    tmpData2 = convert_int4_rte(tmpVal2);
    VXC_DP2x8(result, tmpData1, tmpData2, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1),
        uniConvertInt32toUint8_2x8);
    coordOut.y += 1;
    VXC_WriteImage2DArray(dataOut, coordOut, tmpout, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}

_viv_uniform VXC_512Bits uniConvertFp16toInt8_2x8;

__kernel void unpoolingFp16_Int8
    (
        image2d_array_t dataIn,
        image2d_array_t axis,
        image2d_array_t dataOut,
        unsigned int sizeX,
        unsigned int sizeY
    )
{
    vxc_short4 din;
    vxc_uchar4 axisIn;
    vxc_short8 dinExp, tmpOut;
    vxc_uchar8 axisInExp;
    vxc_uchar8 constAxis;
    vxc_uchar8 axisData;
    vxc_half8 dout;
    float4 tmpVal1, tmpVal2;
    int4 tmpData1, tmpData2;
    vxc_char8 result;

    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    VXC_ReadImage2DArray(din, dataIn, coord, VXC_5BITOFFSET_XY(0, 0),\
        VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(axisIn, axis, coord, VXC_5BITOFFSET_XY(0, 0),\
        VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    int4 coordOut = (int4)(coord.x << 1, coord.y << 1, coord.z, 0);
    dinExp = din.s00112233;
    axisInExp = axisIn.s00112233;
    constAxis = (vxc_uchar8)(0, 1, 0, 1, 0, 1, 0, 1);
    VXC_Clamp(axisData, axisInExp, constAxis, constAxis, VXC_MODIFIER_CLAMP(0, 7, 0, 1));
    axisData &= (vxc_uchar8)(1);
    VXC_DP2x8(tmpOut, axisData, dinExp, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), ucharMulShort_8x8_2);
    _viv_asm(COPY, dout, tmpOut, 16);

    half tmpScale;
    _viv_asm(CONV, tmpScale, up_outFlScale_i8);
    VXC_DP2x8(result, dout, tmpScale, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1),\
        uniConvertFp16toInt8_2x8);
    VXC_WriteImage2DArray(dataOut, coordOut, result, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    constAxis = (vxc_uchar8)(2, 3, 2, 3, 2, 3, 2, 3);
    VXC_Clamp(axisData, axisInExp, constAxis, constAxis, VXC_MODIFIER_CLAMP(0, 7, 0, 1));
    axisData &= (vxc_uchar8)(1);
    VXC_DP2x8(tmpOut, axisData, dinExp, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), ucharMulShort_8x8_2);
    coordOut.y += 1;
    _viv_asm(COPY, dout, tmpOut, 16);
    VXC_DP2x8(result, dout, tmpScale, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1),\
        uniConvertFp16toInt8_2x8);
    VXC_WriteImage2DArray(dataOut, coordOut, result, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}

__kernel void unpoolingFp16_Int16
    (
        image2d_array_t dataIn,
        image2d_array_t axis,
        image2d_array_t dataOut,
        unsigned int sizeX,
        unsigned int sizeY
    )
{
    vxc_short4 din;
    vxc_uchar4 axisIn;
    vxc_short8 dinExp, tmpOut;
    vxc_uchar8 axisInExp;
    vxc_uchar8 constAxis;
    vxc_uchar8 axisData;
    half8 dout;
    float4 tmpVal1, tmpVal2;
    int4 tmpData1, tmpData2;
    vxc_short8 result;

    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    VXC_ReadImage2DArray(din, dataIn, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(axisIn, axis, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    int4 coordOut = (int4)(coord.x << 1, coord.y << 1, coord.z, 0);
    dinExp = din.s00112233;
    axisInExp = axisIn.s00112233;
    constAxis = (vxc_uchar8)(0, 1, 0, 1, 0, 1, 0, 1);
    VXC_Clamp(axisData, axisInExp, constAxis, constAxis, VXC_MODIFIER_CLAMP(0, 7, 0, 1));
    axisData &= (vxc_uchar8)(1);
    VXC_DP2x8(tmpOut, axisData, dinExp, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), ucharMulShort_8x8_2);

    _viv_asm(COPY, dout, tmpOut, 16);
    VXC_DP4x4(tmpVal1, dout, dout, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertFstFp16Fp32_4x4);
    VXC_DP4x4(tmpVal2, dout, dout, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertSecFp16Fp32_4x4);
    tmpVal1 *= up_outFlScale_i16;
    tmpVal2 *= up_outFlScale_i16;
    tmpData1 = convert_int4_rte(tmpVal1);
    tmpData2 = convert_int4_rte(tmpVal2);
    VXC_DP2x8(result, tmpData1, tmpData2, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1),
        uniConvertInt32toUint8_2x8);
    VXC_WriteImage2DArray(dataOut, coordOut, result, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    constAxis = (vxc_uchar8)(2, 3, 2, 3, 2, 3, 2, 3);
    VXC_Clamp(axisData, axisInExp, constAxis, constAxis, VXC_MODIFIER_CLAMP(0, 7, 0, 1));
    axisData &= (vxc_uchar8)(1);
    VXC_DP2x8(tmpOut, axisData, dinExp, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), ucharMulShort_8x8_2);
    coordOut.y += 1;
    _viv_asm(COPY, dout, tmpOut, 16);
    VXC_DP4x4(tmpVal1, dout, dout, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertFstFp16Fp32_4x4);
    VXC_DP4x4(tmpVal2, dout, dout, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertSecFp16Fp32_4x4);
    tmpVal1 *= up_outFlScale_i16;
    tmpVal2 *= up_outFlScale_i16;
    tmpData1 = convert_int4_rte(tmpVal1);
    tmpData2 = convert_int4_rte(tmpVal2);
    VXC_DP2x8(result, tmpData1, tmpData2, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1),
        uniConvertInt32toUint8_2x8);
    VXC_WriteImage2DArray(dataOut, coordOut, result, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}
