#include "cl_viv_vx_ext.h"

_viv_uniform int indices_num;
_viv_uniform VXC_512Bits uniExtraCopyDpKeepinEvis_2x8;

__kernel void gather_I8toI8_array(
    __read_only image2d_t   input0,
    __read_only image2d_t   input1,
    __write_only image2d_t  output,
    int block_size,
    int block_num,
    int axis_num
    )
{
    int gidx = get_global_id(0);  // block_size
    int gidy = get_global_id(1);  // indices_num
    int gidz = get_global_id(2);  // block_num

    int4 coord_in = (int4)(gidy, 0, gidx, 0);
    int4 indice = read_imagei(input1, coord_in.xy);
    coord_in.w = gidz * axis_num + indice.x;

    Image img1 = create_image_from_image2d(input0, 1);
    Image img2 = create_image_from_image2d(output, 1);
    uchar* input_ptr = get_image_ptr_from_coord(img1, coord_in.zw);
    __global vxc_char16* data_ptr = (__global vxc_char16*)input_ptr;
    vxc_char16 src = data_ptr[0];
    int2 coord = (int2)(gidx, gidz * indices_num + gidy);
    uchar* output_ptr = get_image_ptr_from_coord(img2, coord);
    __global vxc_char16* dst_ptr = (__global vxc_char16*)output_ptr;
    dst_ptr[0] = src;
}

__kernel void gather_U8toU8_array(
    __read_only image2d_t   input0,
    __read_only image2d_t   input1,
    __write_only image2d_t  output,
    int block_size,
    int block_num,
    int axis_num
    )
{
    int gidx = get_global_id(0);  // block_size
    int gidy = get_global_id(1);  // indices_num
    int gidz = get_global_id(2);  // block_num

    int4 coord_in = (int4)(gidy, 0, gidx, 0);
    int4 indice = read_imagei(input1, coord_in.xy);
    coord_in.w = gidz * axis_num + indice.x;

    Image img1 = create_image_from_image2d(input0, 1);
    Image img2 = create_image_from_image2d(output, 1);
    uchar* input_ptr = get_image_ptr_from_coord(img1, coord_in.zw);
    __global vxc_uchar16* data_ptr = (__global vxc_uchar16*)input_ptr;
    vxc_uchar16 src = data_ptr[0];
    int2 coord = (int2)(gidx, gidz * indices_num + gidy);
    uchar* output_ptr = get_image_ptr_from_coord(img2, coord);
    __global vxc_uchar16* dst_ptr = (__global vxc_uchar16*)output_ptr;
    dst_ptr[0] = src;
}

__kernel void gather_I16toI16_array(
    __read_only image2d_t   input0,
    __read_only image2d_t   input1,
    __write_only image2d_t  output,
    int block_size,
    int block_num,
    int axis_num
    )
{
    int gidx = get_global_id(0);  // block_size
    int gidy = get_global_id(1);  // indices_num
    int gidz = get_global_id(2);  // block_num

    int4 coord_in = (int4)(gidy, 0, gidx, 0);


    int4 indice = read_imagei(input1, coord_in.xy);
    coord_in.w = gidz * axis_num + indice.x;

    Image img1 = create_image_from_image2d(input0, 2);
    Image img2 = create_image_from_image2d(output, 2);
    uchar* input_ptr = get_image_ptr_from_coord(img1, coord_in.zw);
    __global vxc_short8* data_ptr = (__global vxc_short8*)input_ptr;
    vxc_short8 src = data_ptr[0];
    int2 coord = (int2)(gidx, gidz * indices_num + gidy);
    uchar* output_ptr = get_image_ptr_from_coord(img2, coord);
    __global vxc_short8* dst_ptr = (__global vxc_short8*)output_ptr;
    dst_ptr[0] = src;
}

__kernel void gather_F16toF16_array(
    __read_only image2d_t   input0,
    __read_only image2d_t   input1,
    __write_only image2d_t  output,
    int block_size,
    int block_num,
    int axis_num
    )
{
    int gidx = get_global_id(0);  // block_size
    int gidy = get_global_id(1);  // indices_num
    int gidz = get_global_id(2);  // block_num

    int4 coord_in = (int4)(gidy, 0, gidx, 0);

    int4 indice = read_imagei(input1, coord_in.xy);
    coord_in.w = gidz * axis_num + indice.x;

    Image img1 = create_image_from_image2d(input0, 2);
    Image img2 = create_image_from_image2d(output, 2);
    uchar* input_ptr = get_image_ptr_from_coord(img1, coord_in.zw);
    __global vxc_short8* data_ptr = (__global vxc_short8*)input_ptr;
    vxc_short8 src = data_ptr[0];
    int2 coord = (int2)(gidx, gidz * indices_num + gidy);
    uchar* output_ptr = get_image_ptr_from_coord(img2, coord);
    __global vxc_short8* dst_ptr = (__global vxc_short8*)output_ptr;
    dst_ptr[0] = src;
}
