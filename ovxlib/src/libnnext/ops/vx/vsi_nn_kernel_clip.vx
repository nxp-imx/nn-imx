#include "cl_viv_vx_ext.h"

_viv_uniform int4 packedMinData_FP16;
_viv_uniform int4 packedMaxData_FP16;

__kernel void vxcTensorClip_Fp16(
    __read_only image2d_array_t   input,
    __write_only image2d_array_t  output,
                        float minData,
                        float maxData)
{
    int4 coord =  (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    vxc_short8 vec0, dst;
    vxc_half8  src0, src1, minHf, maxHf;
    VXC_ReadImage2DArray(vec0, input, coord, VXC_5BITOFFSET_XY(0, 0),\
        VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src0, vec0, 16);

    _viv_asm(COPY, minHf, packedMinData_FP16, 16);
    _viv_asm(COPY, maxHf, packedMaxData_FP16, 16);
    VXC_Clamp_Half(src1, src0, minHf, maxHf, VXC_MODIFIER_CLAMP(0, 7, 0, 0));
    _viv_asm(COPY, dst, src1, 16);

    VXC_WriteImage2DArray(output, coord, dst, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
}

_viv_uniform VXC_512Bits uniConvertIntegerLo_2x8;
_viv_uniform VXC_512Bits uniConvertIntegerHi_2x8;

_viv_uniform int4 packedMinDataInt16;
_viv_uniform int4 packedMaxDataInt16;
_viv_uniform int4 packedMinData;
_viv_uniform int4 packedMaxData;

__kernel void vxcTensorClip_Int16(
    __read_only image2d_array_t   input,
    __write_only image2d_array_t  output,
                        float minData,
                        float maxData)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    vxc_short8 src0, min, max;
    VXC_ReadImage2DArray(src0, input, coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    VXC_DP2x8(src0, src0, src0, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniConvertIntegerLo_2x8);

    _viv_asm(COPY, min, packedMinDataInt16, 16);
    _viv_asm(COPY, max, packedMaxDataInt16, 16);
    VXC_Clamp(src0, src0, min, max, VXC_MODIFIER_CLAMP(0, 7, 0, 0));
    VXC_WriteImage2DArray(output, coord, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
}

__kernel void vxcTensorClip_Int8(
    __read_only image2d_array_t   input,
    __write_only image2d_array_t  output,
                        float minData,
                        float maxData)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    vxc_char16 src0, min, max;

    VXC_ReadImage2DArray(src0, input, coord, 0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

    VXC_DP2x8(src0, src0, src0, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniConvertIntegerLo_2x8);
    VXC_DP2x8(src0, src0, src0, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniConvertIntegerHi_2x8);
    _viv_asm(COPY, min, packedMinData, 16);
    _viv_asm(COPY, max, packedMaxData, 16);
    VXC_Clamp(src0, src0, min, max, VXC_MODIFIER_CLAMP(0, 15, 0, 0));

    VXC_WriteImage2DArray(output, coord, src0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
}

_viv_uniform VXC_512Bits uniU8MulAndPostShift_Lo_2x8;
_viv_uniform VXC_512Bits uniU8MulAndPostShift_Hi_2x8;
_viv_uniform int2 multAndoutZP;//[0:15] multiplier, [31:63] output zp

__kernel void vxcTensorClip_Uint8(
    __read_only image2d_array_t   input,
    __write_only image2d_array_t  output,
                        float minData,
                        float maxData)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    vxc_uchar16 vec0, min, max, dst;
    VXC_ReadImage2DArray(vec0, input,  coord,\
         VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

    vxc_ushort8 multiplier;
    _viv_asm(COPY, multiplier, multAndoutZP, 16);
    VXC_DP2x8(dst, vec0, multiplier,\
         VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_Lo_2x8);
    VXC_DP2x8(dst, vec0, multiplier,\
         VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_Hi_2x8);
    _viv_asm(COPY, min, packedMinData, 16);
    _viv_asm(COPY, max, packedMaxData, 16);
    VXC_Clamp(dst, dst, min, max, VXC_MODIFIER_CLAMP(0, 15, 0, 0));
    VXC_WriteImage2DArray(output, coord, dst, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
}
