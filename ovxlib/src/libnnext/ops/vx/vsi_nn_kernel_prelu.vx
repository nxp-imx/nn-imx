#include "cl_viv_vx_ext.h"

_viv_uniform VXC_512Bits UniFP16Mul_dp2x8;
_viv_uniform VXC_512Bits uniConvertDirInt16Fp32_4x4;
_viv_uniform VXC_512Bits uniConvertEndInt16Fp32_4x4;
_viv_uniform VXC_512Bits uniConvertInt32toUint8_2x8;
_viv_uniform VXC_512Bits uniConvertUint8SubZpToFp32_4x4;
_viv_uniform VXC_512Bits uniConvertSecUint8SubZpToFp32_4x4;
_viv_uniform float inScaleInt16;
_viv_uniform float outScaleInt16;

_viv_uniform int input_ZP;
_viv_uniform float inputScale;
_viv_uniform float outputScale;
_viv_uniform int output_ZP;

__kernel void vxcParametricRelu
    (
    image2d_array_t input,
    image2d_array_t para,
    image2d_array_t output
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    int4 coord_para = (int4)(coord.z, 0, 0, 0);

    vxc_short8 img1_s16, para_s16, val_s16;
    vxc_half8 img_fp16, para_fp16, val_fp16;

    VXC_ReadImage2DArray(img1_s16, input, coord, VXC_5BITOFFSET_XY(0,0),\
        VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(para_s16, para, coord_para.xy, VXC_5BITOFFSET_XY(0,0),\
        VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));

    _viv_asm(COPY, para_fp16, para_s16, 16);
    _viv_asm(COPY, img_fp16, img1_s16, 16);
    VXC_DP2x8(val_fp16, img_fp16, para_fp16, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0),\
        UniFP16Mul_dp2x8);
    vxc_short8 mulData;
    _viv_asm(COPY, mulData, val_fp16, 16);
    val_s16 = img1_s16 > 0 ? img1_s16 : mulData;
    VXC_WriteImage2DArray(output, coord, val_s16, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}

_viv_uniform VXC_512Bits uniConvertInt8FstFp32_4x4;
_viv_uniform VXC_512Bits uniConvertInt8SecFp32_4x4;
_viv_uniform VXC_512Bits uniConvertInt8TrdFp32_4x4;
_viv_uniform VXC_512Bits uniConvertInt8ForFp32_4x4;
_viv_uniform VXC_512Bits UniS8xFp16_dp2x8;
_viv_uniform float in_scale_prelu;
_viv_uniform float out_scale_prelu;
_viv_uniform float scale_inOut;
_viv_uniform float scale_inOut_u8;

__kernel void vxcParametricRelu_int8
    (
    image2d_array_t input,
    image2d_array_t para,
    image2d_array_t output
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    int4 coord_para = (int4)(coord.z, 0, 0, 0);

    vxc_char16 img_c16;
    vxc_short8 para_s16;
    half paraHlf;
    float paraFp;
    vxc_char16 outval;
    vxc_float4 imgData0, imgData1, imgData2, imgData3;
    vxc_float4 tmpOut0, tmpOut1, tmpOut2, tmpOut3;
    vxc_int4 tmpVal0, tmpVal1;

    VXC_ReadImage2DArray(img_c16, input, coord, VXC_5BITOFFSET_XY(0,0),\
        VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(para_s16, para, coord_para.xy, VXC_5BITOFFSET_XY(0,0),\
        VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));

    VXC_DP4x4(imgData0, img_c16, img_c16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvertInt8FstFp32_4x4);
    VXC_DP4x4(imgData1, img_c16, img_c16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvertInt8SecFp32_4x4);
    VXC_DP4x4(imgData2, img_c16, img_c16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvertInt8TrdFp32_4x4);
    VXC_DP4x4(imgData3, img_c16, img_c16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvertInt8ForFp32_4x4);

    _viv_asm(COPY, paraHlf, para_s16, 4);
    _viv_asm(CONV, paraFp, paraHlf);
    imgData0 *= scale_inOut;
    imgData1 *= scale_inOut;
    imgData2 *= scale_inOut;
    imgData3 *= scale_inOut;

    vxc_float4 maxData0 = imgData0 > 0 ? imgData0 : 0.0;
    vxc_float4 maxData1 = imgData1 > 0 ? imgData1 : 0.0;
    vxc_float4 minData0 = imgData0 < 0 ? imgData0 : 0.0;
    vxc_float4 minData1 = imgData1 < 0 ? imgData1 : 0.0;
    tmpOut0 = maxData0 + paraFp * minData0;
    tmpOut1 = maxData1 + paraFp * minData1;
    tmpVal0 = convert_int4_rte(tmpOut0);
    tmpVal1 = convert_int4_rte(tmpOut1);
    VXC_DP2x8(outval, tmpVal0, tmpVal1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1),\
        uniConvertInt32toUint8_2x8);

    maxData0 = imgData2 > 0 ? imgData2 : 0.0;
    maxData1 = imgData3 > 0 ? imgData3 : 0.0;
    minData0 = imgData2 < 0 ? imgData2 : 0.0;
    minData1 = imgData3 < 0 ? imgData3 : 0.0;
    tmpOut0 = maxData0 + paraFp * minData0;
    tmpOut1 = maxData1 + paraFp * minData1;
    tmpVal0 = convert_int4_rte(tmpOut0);
    tmpVal1 = convert_int4_rte(tmpOut1);
    VXC_DP2x8(outval, tmpVal0, tmpVal1, VXC_MODIFIER(8, 15, 0, VXC_RM_TowardZero, 1),\
        uniConvertInt32toUint8_2x8);

    VXC_WriteImage2DArray(output, coord, outval, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
}

__kernel void vxcParametricRelu_int8_fp16
    (
    image2d_array_t input,
    image2d_array_t para,
    image2d_array_t output
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    int4 coord_para = (int4)(coord.z, 0, 0, 0);

    vxc_char8 img1_s8;
    vxc_short8 para_s16;
    vxc_half8 img_fp16, para_fp16, val_fp16;
    half inscale_fp16;

    VXC_ReadImage2DArray(img1_s8, input, coord, VXC_5BITOFFSET_XY(0,0),\
        VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(para_s16, para, coord_para.xy, VXC_5BITOFFSET_XY(0,0),\
        VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));

    _viv_asm(CONV, inscale_fp16, in_scale_prelu);
    _viv_asm(COPY, para_fp16, para_s16, 16);

    VXC_DP2x8(img_fp16, img1_s8, inscale_fp16, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1),\
        UniS8xFp16_dp2x8);
    VXC_DP2x8(val_fp16, img_fp16, para_fp16, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0),\
        UniFP16Mul_dp2x8);
    VXC_Clamp_Half(img_fp16, img_fp16, val_fp16, img_fp16, VXC_MODIFIER_CLAMP(0, 7, 0, 0));
    _viv_asm(COPY, para_s16, img_fp16, 16);
    VXC_WriteImage2DArray(output, coord, para_s16, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}

__kernel void vxcParametricReluInt16_Int16
    (
    image2d_array_t input,
    image2d_array_t para,
    image2d_array_t output
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    int4 coord_para = (int4)(coord.z, 0, 0, 0);

    vxc_short8 img_s16, para_s16;
    half paraHlf;
    float paraFp;
    vxc_short8 outval;
    vxc_float4 imgData0, imgData1;
    vxc_float4 tmpOut0, tmpOut1;
    vxc_int4 tmpVal0, tmpVal1;

    VXC_ReadImage2DArray(img_s16, input, coord, VXC_5BITOFFSET_XY(0,0),\
        VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(para_s16, para, coord_para.xy, VXC_5BITOFFSET_XY(0,0),\
        VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));

    VXC_DP4x4(imgData0, img_s16, img_s16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvertDirInt16Fp32_4x4);
    VXC_DP4x4(imgData1, img_s16, img_s16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvertEndInt16Fp32_4x4);

    _viv_asm(COPY, paraHlf, para_s16, 2);
    _viv_asm(CONV, paraFp, paraHlf);
    imgData0 *= scale_inOut;
    imgData1 *= scale_inOut;

    vxc_float4 maxData0 = imgData0 > 0 ? imgData0 : 0.0;
    vxc_float4 maxData1 = imgData1 > 0 ? imgData1 : 0.0;
    vxc_float4 minData0 = imgData0 < 0 ? imgData0 : 0.0;
    vxc_float4 minData1 = imgData1 < 0 ? imgData1 : 0.0;
    tmpOut0 = maxData0 + paraFp * minData0;
    tmpOut1 = maxData1 + paraFp * minData1;

    tmpVal0 = convert_int4_rte(tmpOut0);
    tmpVal1 = convert_int4_rte(tmpOut1);

    VXC_DP2x8(outval, tmpVal0, tmpVal1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1),\
        uniConvertInt32toUint8_2x8);
    VXC_WriteImage2DArray(output, coord, outval, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}

__kernel void vxcParametricReluUint8_Uint8
    (
    image2d_array_t input,
    image2d_array_t para,
    image2d_array_t output
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    int4 coord_para = (int4)(coord.z, 0, 0, 0);

    vxc_uchar16 img_s16;
    vxc_short8 para_s16;
    half paraHlf;
    float paraFp;
    vxc_uchar8 outval;
    vxc_float4 imgData0, imgData1;
    vxc_float4 tmpOut0, tmpOut1;
    vxc_int4 tmpVal0, tmpVal1;

    VXC_ReadImage2DArray(img_s16, input, coord, VXC_5BITOFFSET_XY(0,0),\
        VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(para_s16, para, coord_para.xy, VXC_5BITOFFSET_XY(0,0),\
        VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));

    short zp = input_ZP;

    VXC_DP4x4(imgData0, img_s16, zp, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvertUint8SubZpToFp32_4x4);
    VXC_DP4x4(imgData1, img_s16, zp, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvertSecUint8SubZpToFp32_4x4);

    _viv_asm(COPY, paraHlf, para_s16, 2);
    _viv_asm(CONV, paraFp, paraHlf);
    imgData0 *= scale_inOut_u8;
    imgData1 *= scale_inOut_u8;

    vxc_float4 maxData0 = imgData0 > 0 ? imgData0 : 0.0;
    vxc_float4 maxData1 = imgData1 > 0 ? imgData1 : 0.0;
    vxc_float4 minData0 = imgData0 < 0 ? imgData0 : 0.0;
    vxc_float4 minData1 = imgData1 < 0 ? imgData1 : 0.0;
    tmpOut0 = maxData0 + paraFp * minData0;
    tmpOut1 = maxData1 + paraFp * minData1;

    tmpVal0 = convert_int4_rte(tmpOut0 + output_ZP);
    tmpVal1 = convert_int4_rte(tmpOut1 + output_ZP);

    VXC_DP2x8(outval, tmpVal0, tmpVal1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1),\
        uniConvertInt32toUint8_2x8);
    VXC_WriteImage2DArray(output, coord, outval, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}

__kernel void vxcParametricReluFp16_Uint8
    (
    image2d_array_t input,
    image2d_array_t para,
    image2d_array_t output
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    int4 coord_para = (int4)(coord.z, 0, 0, 0);

    vxc_short8 img_s16, para_s16;
    vxc_half8 img_fp16;
    half paraHlf;
    float paraFp;
    vxc_uchar8 outval;
    vxc_float4 imgData0, imgData1;
    vxc_float4 tmpOut0, tmpOut1;
    vxc_int4 tmpVal0, tmpVal1;

    VXC_ReadImage2DArray(img_s16, input, coord, VXC_5BITOFFSET_XY(0,0),\
        VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(para_s16, para, coord_para.xy, VXC_5BITOFFSET_XY(0,0),\
        VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));

    _viv_asm(COPY, img_fp16, img_s16, 16);
    VXC_DP4x4(imgData0, img_fp16, img_fp16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvertDirInt16Fp32_4x4);
    VXC_DP4x4(imgData1, img_fp16, img_fp16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvertEndInt16Fp32_4x4);

    _viv_asm(COPY, paraHlf, para_s16, 2);
    _viv_asm(CONV, paraFp, paraHlf);

    vxc_float4 maxData0 = imgData0 > 0 ? imgData0 : 0.0;
    vxc_float4 maxData1 = imgData1 > 0 ? imgData1 : 0.0;
    vxc_float4 minData0 = imgData0 < 0 ? imgData0 : 0.0;
    vxc_float4 minData1 = imgData1 < 0 ? imgData1 : 0.0;
    tmpOut0 = maxData0 + paraFp * minData0;
    tmpOut1 = maxData1 + paraFp * minData1;

    tmpVal0 = convert_int4_rte(tmpOut0 * outputScale + output_ZP);
    tmpVal1 = convert_int4_rte(tmpOut1 * outputScale + output_ZP);
    VXC_DP2x8(outval, tmpVal0, tmpVal1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1),\
        uniConvertInt32toUint8_2x8);
    VXC_WriteImage2DArray(output, coord, outval, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}

__kernel void vxcParametricReluFp16_Int16
    (
    image2d_array_t input,
    image2d_array_t para,
    image2d_array_t output
    )
{
    int gidx = get_global_id(0);
    int gidy = get_global_id(1);
    int gidz = get_global_id(2);
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    int4 coord_para = (int4)(coord.z, 0, 0, 0);

    vxc_short8 img_s16, para_s16;
    vxc_half8 img_fp16;
    half paraHlf;
    float paraFp;
    vxc_float4 p4;
    vxc_short8 outval;
    vxc_float4 imgData0, imgData1;
    vxc_float4 tmpOut0, tmpOut1;
    vxc_int4 tmpVal0, tmpVal1;

    VXC_ReadImage2DArray(img_s16, input, coord, VXC_5BITOFFSET_XY(0,0),\
        VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(para_s16, para, coord_para.xy, VXC_5BITOFFSET_XY(0,0),\
        VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));

    _viv_asm(COPY, img_fp16, img_s16, 16);
    VXC_DP4x4(imgData0, img_fp16, img_fp16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvertDirInt16Fp32_4x4);
    VXC_DP4x4(imgData1, img_fp16, img_fp16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvertEndInt16Fp32_4x4);

    _viv_asm(COPY, paraHlf, para_s16, 2);
    _viv_asm(CONV, paraFp, paraHlf);

    vxc_float4 maxData0 = imgData0 > 0 ? imgData0 : 0.0;
    vxc_float4 maxData1 = imgData1 > 0 ? imgData1 : 0.0;
    vxc_float4 minData0 = imgData0 < 0 ? imgData0 : 0.0;
    vxc_float4 minData1 = imgData1 < 0 ? imgData1 : 0.0;
    tmpOut0 = maxData0 + paraFp * minData0;
    tmpOut1 = maxData1 + paraFp * minData1;
    tmpOut0 *= outScaleInt16;
    tmpOut1 *= outScaleInt16;

    tmpVal0 = convert_int4_rte(tmpOut0);
    tmpVal1 = convert_int4_rte(tmpOut1);

    VXC_DP2x8(outval, tmpVal0, tmpVal1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1),\
        uniConvertInt32toUint8_2x8);
    VXC_WriteImage2DArray(output, coord, outval, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}

__kernel void vxcParametricReluInt16_Fp16
    (
    image2d_array_t input,
    image2d_array_t para,
    image2d_array_t output
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    int4 coord_para = (int4)(coord.z, 0, 0, 0);

    vxc_short8 img_s16, para_s16;
    half paraHlf;
    float paraFp;
    vxc_short8 outval;
    vxc_float4 imgData0, imgData1;
    vxc_float4 tmpOut0, tmpOut1;
    half4 tmpVal0, tmpVal1;

    VXC_ReadImage2DArray(img_s16, input, coord, VXC_5BITOFFSET_XY(0,0),\
        VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(para_s16, para, coord_para.xy, VXC_5BITOFFSET_XY(0,0),\
        VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));

    VXC_DP4x4(imgData0, img_s16, img_s16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvertDirInt16Fp32_4x4);
    VXC_DP4x4(imgData1, img_s16, img_s16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvertEndInt16Fp32_4x4);

    _viv_asm(COPY, paraHlf, para_s16, 2);
    _viv_asm(CONV, paraFp, paraHlf);
    imgData0 *= inScaleInt16;
    imgData1 *= inScaleInt16;

    vxc_float4 maxData0 = imgData0 > 0 ? imgData0 : 0.0;
    vxc_float4 maxData1 = imgData1 > 0 ? imgData1 : 0.0;
    vxc_float4 minData0 = imgData0 < 0 ? imgData0 : 0.0;
    vxc_float4 minData1 = imgData1 < 0 ? imgData1 : 0.0;
    tmpOut0 = maxData0 + paraFp * minData0;
    tmpOut1 = maxData1 + paraFp * minData1;

    _viv_asm(CONV, tmpVal0, tmpOut0);
    _viv_asm(CONV, tmpVal1, tmpOut1);
    VXC_DP2x8(outval, tmpVal0, tmpVal1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0),\
        uniConvertInt32toUint8_2x8);
    VXC_WriteImage2DArray(output, coord, outval, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}
