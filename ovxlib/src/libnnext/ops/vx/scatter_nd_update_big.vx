#include "cl_viv_vx_ext.h"

_viv_uniform VXC_512Bits uniAccumulateSum_2x8;
_viv_uniform VXC_512Bits uniU8MulAndPostShift_0_Lo_2x8;
_viv_uniform VXC_512Bits uniU8MulAndPostShift_1_Lo_2x8;
_viv_uniform VXC_512Bits uniConvert1stFp16ToFp32_4x4;
_viv_uniform int index_num;
_viv_uniform int update_width;
_viv_uniform int output_width;
_viv_uniform int2 multAndoutZP0;
_viv_uniform int2 multAndoutZP1;//[0:15] multiplier, [31:63] output zp

_viv_uniform int offsetX;
_viv_uniform int offsetY;
_viv_uniform int offsetZ;
_viv_uniform int offsetW;
_viv_uniform int offset_idx;

__kernel void scatter_nd_update_F16F16toF16_big(
    __read_only image2d_t   input0,
    __read_only image2d_t   input1,
    __read_only image2d_t   input2,
    image2d_t  output,
    int width,
    int area,
    int vol,
    int coord_dim
    )
{
    int gidx = get_global_id(0);
    int gidy = get_global_id(1);
    int cnt = 0;

    vxc_short8 tmpVal = (vxc_short8)(0, 0, 0, 0, 0, 0, 0, 0);
    vxc_half8 sum;
    _viv_asm(COPY, sum, tmpVal, 16);
    Image img1 = create_image_from_image2d(input1, 4);
    Image img2 = create_image_from_image2d(input2, 2);
    Image img3 = create_image_from_image2d(output, 2);

    __global int* index_ptr = (__global int*)img1.ptr;
    __global short* update_ptr = (__global short*)img2.ptr;
    __global short* output_ptr = (__global short*)img3.ptr;
    for(int i = 0; i < index_num; i++)
    {
        int4 indice = vload4(0, index_ptr + offset_idx);
        index_ptr += coord_dim;

        int idx = indice.x * offsetX + indice.y * offsetY + indice.z * offsetZ + indice.w * offsetW;
        if(gidy == idx)
        {
            vxc_half8 src;
            short tmpData = update_ptr[i * update_width + gidx];
            cnt++;
            _viv_asm(COPY, src, tmpData, 4);
            VXC_DP2x8(sum, sum, src, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniAccumulateSum_2x8);
        }
    }
    short dst;
    _viv_asm(COPY, dst, sum, 4);
    int loc = gidy * output_width+ gidx;
    if(cnt == 0)
    {
        Image img0 = create_image_from_image2d(input0, 2);
        __global short* ref_ptr = (__global short*)img0.ptr;
        dst = ref_ptr[loc];
    }
    output_ptr[loc] = dst;
}

#define SCATTER_ND_UPDATE_QINT_BIG(src0_type, src2_type, data_type, ptr_type, element_size) \
__kernel void scatter_nd_update_##src0_type##src2_type##to##src0_type##_big( \
    __read_only image2d_t   input0, \
    __read_only image2d_t   input1, \
    __read_only image2d_t   input2, \
    image2d_t  output, \
    int width, \
    int area, \
    int vol, \
    int coord_dim \
    ) \
{ \
    int gidx = get_global_id(0);  \
    int gidy = get_global_id(1); \
    int cnt = 0; \
 \
    data_type sum = (data_type)(0, 0, 0, 0, 0, 0, 0, 0); \
    Image img1 = create_image_from_image2d(input1, 4); \
    Image img2 = create_image_from_image2d(input2, element_size); \
    Image img3 = create_image_from_image2d(output, element_size); \
    __global int* index_ptr = (__global int*)img1.ptr; \
    __global ptr_type* update_ptr = (__global ptr_type*)img2.ptr; \
    __global ptr_type* output_ptr = (__global ptr_type*)img3.ptr; \
    data_type src; \
    for(int i = 0; i < index_num; i++) \
    { \
        int4 indice = vload4(0, index_ptr + offset_idx); \
        index_ptr += coord_dim; \
        int idx = indice.x * offsetX + indice.y * offsetY + indice.z * offsetZ + indice.w * offsetW; \
        if(gidy == idx) \
        { \
            ptr_type tmpData = update_ptr[i * update_width + gidx]; \
            cnt++; \
            _viv_asm(COPY, src, tmpData, 4); \
            VXC_DP2x8(sum, sum, src, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniAccumulateSum_2x8); \
        } \
    } \
    int loc = gidy * output_width+ gidx; \
    vxc_ushort8 ms0; \
    data_type dst; \
    if(cnt == 0) \
    { \
        Image img0 = create_image_from_image2d(input0, element_size); \
        __global ptr_type* ref_ptr = (__global ptr_type*)img0.ptr; \
        ptr_type tmpData = ref_ptr[loc]; \
        _viv_asm(COPY, ms0, multAndoutZP0, 16); \
        _viv_asm(COPY, src, tmpData, 4); \
        VXC_DP2x8(dst, src, ms0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1), \
                    uniU8MulAndPostShift_0_Lo_2x8); \
        output_ptr[loc] = dst.x; \
    } \
    else \
    { \
        _viv_asm(COPY, ms0, multAndoutZP1, 16); \
        VXC_DP2x8(dst, sum, ms0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1), \
                    uniU8MulAndPostShift_1_Lo_2x8); \
        output_ptr[loc] = dst.x; \
    } \
}
SCATTER_ND_UPDATE_QINT_BIG(U8,  U8,  vxc_uchar8, uchar, 1)
SCATTER_ND_UPDATE_QINT_BIG(I8,  I8,  vxc_char8,  char,  1)
SCATTER_ND_UPDATE_QINT_BIG(I16, I16, vxc_short8, short, 2)

__kernel void scatter_nd_update_U8U8toF16_big(
    __read_only image2d_t   input0,
    __read_only image2d_t   input1,
    __read_only image2d_t   input2,
    image2d_t  output,
    int width,
    int area,
    int vol,
    int coord_dim
    )
{
    int gidx = get_global_id(0);
    int gidy = get_global_id(1);
    int cnt = 0;

    vxc_short8 sum = (vxc_short8)(0, 0, 0, 0, 0, 0, 0, 0);
    Image img1 = create_image_from_image2d(input1, 4);
    Image img2 = create_image_from_image2d(input2, 1);
    Image img3 = create_image_from_image2d(output, 2);
    __global int* index_ptr = (__global int*)img1.ptr;
    __global uchar* update_ptr = (__global uchar*)img2.ptr;
    __global short* output_ptr = (__global short*)img3.ptr;
    vxc_uchar8 src;
    for(int i = 0; i < index_num; i++)
    {
        int4 indice = vload4(0, index_ptr + offset_idx);
        index_ptr += coord_dim;
        int idx = indice.x * offsetX + indice.y * offsetY + indice.z * offsetZ + indice.w * offsetW;
        if(gidy == idx)
        {
            uchar tmpData = update_ptr[i * update_width + gidx];
            cnt++;
            _viv_asm(COPY, src, tmpData, 4);
            VXC_DP2x8(sum, sum, src, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniAccumulateSum_2x8);
        }
    }
    int loc = gidy * output_width+ gidx;
    vxc_ushort8 ms0;
    vxc_half8 tmpDst;
    vxc_short8 dst;
    if(cnt == 0)
    {
        Image img0 = create_image_from_image2d(input0, 1);
        __global uchar* ref_ptr = (__global uchar*)img0.ptr;
        uchar tmpData = ref_ptr[loc];
        _viv_asm(COPY, ms0, multAndoutZP0, 16);
        _viv_asm(COPY, src, tmpData, 4);
        VXC_DP2x8(tmpDst, src, ms0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1),
                    uniU8MulAndPostShift_0_Lo_2x8);
        _viv_asm(COPY, dst, tmpDst, 16);
        output_ptr[loc] = dst.x;
    }
    else
    {
        _viv_asm(COPY, ms0, multAndoutZP1, 16);
        VXC_DP2x8(tmpDst, sum, ms0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1),
                    uniU8MulAndPostShift_1_Lo_2x8);
        _viv_asm(COPY, dst, tmpDst, 16);
        output_ptr[loc] = dst.x;
    }
}