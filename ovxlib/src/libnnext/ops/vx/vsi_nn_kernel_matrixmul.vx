#include "cl_viv_vx_ext.h"

_viv_uniform int input1_ZP;
_viv_uniform int input2_ZP;
_viv_uniform int output_ZP;
_viv_uniform float input1Scale;
_viv_uniform float input2Scale;
_viv_uniform float outputScale;
_viv_uniform VXC_512Bits uniConvertUint8SubZpToFp32_4x4;
_viv_uniform VXC_512Bits uniConvertInt32toUint8_2x8;

__kernel void gemm_block4x4_u8(image2d_array_t inputA,
                        image2d_array_t inputB,
                        image2d_array_t output,
                                    int transposeA,
                                    int transposeB,
                                    int adjointA,
                                    int adjointB,
                        uint M, uint K, uint N)
{
    uint gidy = get_global_id(1);

    vxc_uchar16 srcA, srcB, outC;

    int4 coord_a = (int4)(0, gidy, get_global_id(2), 0);
    int4 coord_b = (int4)(get_global_id(0), 0, get_global_id(2), 0);

    vxc_float4 sum0 = (vxc_float4)(0);
    vxc_float4 sum1 = (vxc_float4)(0);
    vxc_float4 sum2 = (vxc_float4)(0);
    vxc_float4 sum3 = (vxc_float4)(0);

    short zp1 = input1_ZP;
    short zp2 = input2_ZP;

    for(int i = 0; i < K; i+=4)
    {
        vxc_float4 tempA0, tempA1, tempA2, tempA3;
        vxc_float4 tempB0, tempB1, tempB2, tempB3;

        coord_a.x = i;
        coord_b.y = i;
        VXC_ReadImage2DArray(srcA, inputA, coord_a, VXC_5BITOFFSET_XY(0, 0),
            VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
        VXC_ReadImage2DArray(srcB, inputB, coord_b, VXC_5BITOFFSET_XY(0, 0),
            VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
        VXC_DP4x4(tempA0, srcA, zp1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
            uniConvertUint8SubZpToFp32_4x4);
        tempA0 *= input1Scale;
        VXC_DP4x4(tempB0, srcB, zp2, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
            uniConvertUint8SubZpToFp32_4x4);
        tempB0 *= input2Scale;

        VXC_ReadImage2DArray(srcA, inputA, coord_a, VXC_5BITOFFSET_XY(0, 1),
            VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
        VXC_ReadImage2DArray(srcB, inputB, coord_b, VXC_5BITOFFSET_XY(0, 1),
            VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
        VXC_DP4x4(tempA1, srcA, zp1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
            uniConvertUint8SubZpToFp32_4x4);
        tempA1 *= input1Scale;
        VXC_DP4x4(tempB1, srcB, zp2, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
            uniConvertUint8SubZpToFp32_4x4);
        tempB1 *= input2Scale;

        VXC_ReadImage2DArray(srcA, inputA, coord_a, VXC_5BITOFFSET_XY(0, 2),
            VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
        VXC_ReadImage2DArray(srcB, inputB, coord_b, VXC_5BITOFFSET_XY(0, 2),
            VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
        VXC_DP4x4(tempA2, srcA, zp1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
            uniConvertUint8SubZpToFp32_4x4);
        tempA2 *= input1Scale;
        VXC_DP4x4(tempB2, srcB, zp2, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
            uniConvertUint8SubZpToFp32_4x4);
        tempB2 *= input2Scale;

        VXC_ReadImage2DArray(srcA, inputA, coord_a, VXC_5BITOFFSET_XY(0, 3),
            VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
        VXC_ReadImage2DArray(srcB, inputB, coord_b, VXC_5BITOFFSET_XY(0, 3),
            VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
        VXC_DP4x4(tempA3, srcA, zp1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
            uniConvertUint8SubZpToFp32_4x4);
        tempA3 *= input1Scale;
        VXC_DP4x4(tempB3, srcB, zp2, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
            uniConvertUint8SubZpToFp32_4x4);
        tempB3 *= input2Scale;

        sum0 += (tempA0.x * tempB0 + tempA0.y * tempB1 + tempA0.z * tempB2 + tempA0.w * tempB3);
        sum1 += (tempA1.x * tempB0 + tempA1.y * tempB1 + tempA1.z * tempB2 + tempA1.w * tempB3);
        sum2 += (tempA2.x * tempB0 + tempA2.y * tempB1 + tempA2.z * tempB2 + tempA2.w * tempB3);
        sum3 += (tempA3.x * tempB0 + tempA3.y * tempB1 + tempA3.z * tempB2 + tempA3.w * tempB3);
    }
    vxc_int4 tmpOut0, tmpOut1;
    coord_b.y = gidy;
    tmpOut0 = convert_int4_rte(sum0 * outputScale + output_ZP);
    tmpOut1 = convert_int4_rte(sum1 * outputScale + output_ZP);
    VXC_DP2x8(outC, tmpOut0, tmpOut1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1),\
        uniConvertInt32toUint8_2x8);
    VXC_WriteImage2DArray(output, coord_b, outC.s0123, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    coord_b.y++;
    VXC_WriteImage2DArray(output, coord_b, outC.s4567, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));

    coord_b.y++;
    tmpOut0 = convert_int4_rte(sum2 * outputScale + output_ZP);
    tmpOut1 = convert_int4_rte(sum3 * outputScale + output_ZP);
    VXC_DP2x8(outC, tmpOut0, tmpOut1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1),\
        uniConvertInt32toUint8_2x8);
    VXC_WriteImage2DArray(output, coord_b, outC.s0123, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    coord_b.y++;
    VXC_WriteImage2DArray(output, coord_b, outC.s4567, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
}

__kernel void gemm_block4x4_fp16_u8_fp16(image2d_array_t inputA,
                        image2d_array_t inputB,
                        image2d_array_t output,
                                    int transposeA,
                                    int transposeB,
                                    int adjointA,
                                    int adjointB,
                        uint M, uint K, uint N)
{
    uint gidy = get_global_id(1);

    half4 valA, valC;
    vxc_short8 srcA, outC, tmpA;
    vxc_uchar16 srcB;

    int4 coord_a = (int4)(0, gidy, get_global_id(2), 0);
    int4 coord_b = (int4)(get_global_id(0), 0, get_global_id(2), 0);

    vxc_float4 sum0 = (vxc_float4)(0);
    vxc_float4 sum1 = (vxc_float4)(0);
    vxc_float4 sum2 = (vxc_float4)(0);
    vxc_float4 sum3 = (vxc_float4)(0);

    short zp2 = input2_ZP;

    for(int i = 0; i < K; i+=4)
    {
        vxc_float4 tempA0, tempA1, tempA2, tempA3;
        vxc_float4 tempB0, tempB1, tempB2, tempB3;

        coord_a.x = i;
        coord_b.y = i;
        VXC_ReadImage2DArray(srcA, inputA, coord_a, VXC_5BITOFFSET_XY(0, 0),
            VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
        VXC_ReadImage2DArray(srcB, inputB, coord_b, VXC_5BITOFFSET_XY(0, 0),
            VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
        tmpA = srcA.s04152637;
        _viv_asm(COPY, valA, tmpA, 16);
        _viv_asm(CONV, tempA0, valA);
        VXC_DP4x4(tempB0, srcB, zp2, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
            uniConvertUint8SubZpToFp32_4x4);
        tempB0 *= input2Scale;

        VXC_ReadImage2DArray(srcA, inputA, coord_a, VXC_5BITOFFSET_XY(0, 1),
            VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
        VXC_ReadImage2DArray(srcB, inputB, coord_b, VXC_5BITOFFSET_XY(0, 1),
            VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
        tmpA = srcA.s04152637;
        _viv_asm(COPY, valA, tmpA, 16);
        _viv_asm(CONV, tempA1, valA);
        VXC_DP4x4(tempB1, srcB, zp2, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
            uniConvertUint8SubZpToFp32_4x4);
        tempB1 *= input2Scale;

        VXC_ReadImage2DArray(srcA, inputA, coord_a, VXC_5BITOFFSET_XY(0, 2),
            VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
        VXC_ReadImage2DArray(srcB, inputB, coord_b, VXC_5BITOFFSET_XY(0, 2),
            VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
        tmpA = srcA.s04152637;
        _viv_asm(COPY, valA, tmpA, 16);
        _viv_asm(CONV, tempA2, valA);
        VXC_DP4x4(tempB2, srcB, zp2, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
            uniConvertUint8SubZpToFp32_4x4);
        tempB2 *= input2Scale;

        VXC_ReadImage2DArray(srcA, inputA, coord_a, VXC_5BITOFFSET_XY(0, 3),
            VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
        VXC_ReadImage2DArray(srcB, inputB, coord_b, VXC_5BITOFFSET_XY(0, 3),
            VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
        tmpA = srcA.s04152637;
        _viv_asm(COPY, valA, tmpA, 16);
        _viv_asm(CONV, tempA3, valA);
        VXC_DP4x4(tempB3, srcB, zp2, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
            uniConvertUint8SubZpToFp32_4x4);
        tempB3 *= input2Scale;

        sum0 += (tempA0.x * tempB0 + tempA0.y * tempB1 + tempA0.z * tempB2 + tempA0.w * tempB3);
        sum1 += (tempA1.x * tempB0 + tempA1.y * tempB1 + tempA1.z * tempB2 + tempA1.w * tempB3);
        sum2 += (tempA2.x * tempB0 + tempA2.y * tempB1 + tempA2.z * tempB2 + tempA2.w * tempB3);
        sum3 += (tempA3.x * tempB0 + tempA3.y * tempB1 + tempA3.z * tempB2 + tempA3.w * tempB3);
    }

    coord_b.y = gidy;
    _viv_asm(CONV, valC, sum0);
    _viv_asm(COPY, outC, valC, 16);
    VXC_WriteImage2DArray(output, coord_b, outC.s0246, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));

    coord_b.y++;
    _viv_asm(CONV, valC, sum1);
    _viv_asm(COPY, outC, valC, 16);
    VXC_WriteImage2DArray(output, coord_b, outC.s0246, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));

    coord_b.y++;
    _viv_asm(CONV, valC, sum2);
    _viv_asm(COPY, outC, valC, 16);
    VXC_WriteImage2DArray(output, coord_b, outC.s0246, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));

    coord_b.y++;
    _viv_asm(CONV, valC, sum3);
    _viv_asm(COPY, outC, valC, 16);
    VXC_WriteImage2DArray(output, coord_b, outC.s0246, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
}

__kernel void gemm_block4x4_fp16_u8_u8(image2d_array_t inputA,
                        image2d_array_t inputB,
                        image2d_array_t output,
                                    int transposeA,
                                    int transposeB,
                                    int adjointA,
                                    int adjointB,
                        uint M, uint K, uint N)
{
    uint gidy = get_global_id(1);

    vxc_short8 srcA, tmpA;
    half4 valA;
    vxc_uchar16 srcB, outC;

    int4 coord_a = (int4)(0, gidy, get_global_id(2), 0);
    int4 coord_b = (int4)(get_global_id(0), 0, get_global_id(2), 0);

    vxc_float4 sum0 = (vxc_float4)(0);
    vxc_float4 sum1 = (vxc_float4)(0);
    vxc_float4 sum2 = (vxc_float4)(0);
    vxc_float4 sum3 = (vxc_float4)(0);

    short zp2 = input2_ZP;

    for(int i = 0; i < K; i+=4)
    {
        vxc_float4 tempA0, tempA1, tempA2, tempA3;
        vxc_float4 tempB0, tempB1, tempB2, tempB3;

        coord_a.x = i;
        coord_b.y = i;
        VXC_ReadImage2DArray(srcA, inputA, coord_a, VXC_5BITOFFSET_XY(0, 0),
            VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
        VXC_ReadImage2DArray(srcB, inputB, coord_b, VXC_5BITOFFSET_XY(0, 0),
            VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
        tmpA = srcA.s04152637;
        _viv_asm(COPY, valA, tmpA, 16);
        _viv_asm(CONV, tempA0, valA);
        VXC_DP4x4(tempB0, srcB, zp2, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
            uniConvertUint8SubZpToFp32_4x4);
        tempB0 *= input2Scale;

        VXC_ReadImage2DArray(srcA, inputA, coord_a, VXC_5BITOFFSET_XY(0, 1),
            VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
        VXC_ReadImage2DArray(srcB, inputB, coord_b, VXC_5BITOFFSET_XY(0, 1),
            VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
        tmpA = srcA.s04152637;
        _viv_asm(COPY, valA, tmpA, 16);
        _viv_asm(CONV, tempA1, valA);
        VXC_DP4x4(tempB1, srcB, zp2, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
            uniConvertUint8SubZpToFp32_4x4);
        tempB1 *= input2Scale;

        VXC_ReadImage2DArray(srcA, inputA, coord_a, VXC_5BITOFFSET_XY(0, 2),
            VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
        VXC_ReadImage2DArray(srcB, inputB, coord_b, VXC_5BITOFFSET_XY(0, 2),
            VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
        tmpA = srcA.s04152637;
        _viv_asm(COPY, valA, tmpA, 16);
        _viv_asm(CONV, tempA2, valA);
        VXC_DP4x4(tempB2, srcB, zp2, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
            uniConvertUint8SubZpToFp32_4x4);
        tempB2 *= input2Scale;

        VXC_ReadImage2DArray(srcA, inputA, coord_a, VXC_5BITOFFSET_XY(0, 3),
            VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
        VXC_ReadImage2DArray(srcB, inputB, coord_b, VXC_5BITOFFSET_XY(0, 3),
            VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
        tmpA = srcA.s04152637;
        _viv_asm(COPY, valA, tmpA, 16);
        _viv_asm(CONV, tempA3, valA);
        VXC_DP4x4(tempB3, srcB, zp2, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
            uniConvertUint8SubZpToFp32_4x4);
        tempB3 *= input2Scale;

        sum0 += (tempA0.x * tempB0 + tempA0.y * tempB1 + tempA0.z * tempB2 + tempA0.w * tempB3);
        sum1 += (tempA1.x * tempB0 + tempA1.y * tempB1 + tempA1.z * tempB2 + tempA1.w * tempB3);
        sum2 += (tempA2.x * tempB0 + tempA2.y * tempB1 + tempA2.z * tempB2 + tempA2.w * tempB3);
        sum3 += (tempA3.x * tempB0 + tempA3.y * tempB1 + tempA3.z * tempB2 + tempA3.w * tempB3);
    }
    vxc_int4 tmpOut0, tmpOut1;
    coord_b.y = gidy;
    tmpOut0 = convert_int4_rte(sum0 * outputScale + output_ZP);
    tmpOut1 = convert_int4_rte(sum1 * outputScale + output_ZP);
    VXC_DP2x8(outC, tmpOut0, tmpOut1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1),\
        uniConvertInt32toUint8_2x8);
    VXC_WriteImage2DArray(output, coord_b, outC.s0123, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    coord_b.y++;
    VXC_WriteImage2DArray(output, coord_b, outC.s4567, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));

    coord_b.y++;
    tmpOut0 = convert_int4_rte(sum2 * outputScale + output_ZP);
    tmpOut1 = convert_int4_rte(sum3 * outputScale + output_ZP);
    VXC_DP2x8(outC, tmpOut0, tmpOut1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1),\
        uniConvertInt32toUint8_2x8);
    VXC_WriteImage2DArray(output, coord_b, outC.s0123, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    coord_b.y++;
    VXC_WriteImage2DArray(output, coord_b, outC.s4567, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
}