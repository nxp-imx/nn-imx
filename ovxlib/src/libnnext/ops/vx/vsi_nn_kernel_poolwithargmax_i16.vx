#include "cl_viv_vx_ext.h"

_viv_uniform VXC_512Bits poolingEncode2;
_viv_uniform VXC_512Bits uniConvertDirInt16Fp32_4x4;
_viv_uniform VXC_512Bits uniConvertEndInt16Fp32_4x4;
_viv_uniform VXC_512Bits uniConvertInt32toInt16_2x8;
_viv_uniform float scaleSF;
_viv_uniform float input_fl_scale_i16;
_viv_uniform VXC_512Bits uniPackHalf8_2x8_2;

__kernel void poolingWithArgmaxInt16_s2k2p0
    (
    image2d_array_t tensorIn,
    image2d_array_t tensorOut,
    image2d_array_t axis,
    int type,
    int sizeX,
    int sizeY,
    int paddingX,
    int paddingY
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    vxc_short8 din0, din1;
    vxc_short8 din0Fp16, din1Fp16;
    vxc_short8 maxDataVer, maxDataVer1;
    int4 bitExtractCoeff;
    vxc_short8 din0EqualTmp, din1EqualTmp;
    vxc_uchar8 din0Equal, din1Equal;
    vxc_uchar4 axisEncode;
    vxc_uchar4 axisOut;

    VXC_ReadImage2DArray(din0, tensorIn, coord, VXC_5BITOFFSET_XY(0, 0),\
        VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(din1, tensorIn, coord, VXC_5BITOFFSET_XY(0, 1),\
        VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    int4 coordOut = (int4)(coord.x >> 1, coord.y >> 1, coord.z, 0);
    _viv_asm(COPY, din0Fp16, din0, 16);
    _viv_asm(COPY, din1Fp16, din1, 16);
    VXC_VertMax3_Integer(maxDataVer, din0Fp16, din1Fp16, din1Fp16, VXC_MODIFIER_BIN(0, 7, 0));
    _viv_asm(COPY, din0, maxDataVer, 16);
    din1 = din0.s10325476;
    _viv_asm(COPY, maxDataVer1, din1, 16);
    VXC_VertMax3_Integer(maxDataVer, maxDataVer1, maxDataVer, maxDataVer, VXC_MODIFIER_BIN(0, 7, 0));
    _viv_asm(COPY, din0, maxDataVer, 16);
    din1 = din0.s02460246;//output
    VXC_WriteImage2DArray(tensorOut, coordOut, din1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));

    //get axis
    VXC_Clamp(din0EqualTmp, din0Fp16, maxDataVer, maxDataVer, VXC_MODIFIER_CLAMP(0, 7, 0, 1));
    VXC_Clamp(din1EqualTmp, din1Fp16, maxDataVer, maxDataVer, VXC_MODIFIER_CLAMP(0, 7, 0, 1));
    bitExtractCoeff = (int4)(0x30201000, 0x70605040, 0x01010101, 0x01010101);
    VXC_BitExtract(din0Equal, din0EqualTmp, din0EqualTmp, bitExtractCoeff, VXC_MODIFIER_BIN(0, 7, 0));
    VXC_BitExtract(din1Equal, din1EqualTmp, din1EqualTmp, bitExtractCoeff, VXC_MODIFIER_BIN(0, 7, 0));
    VXC_DP4x4(axisEncode, din0Equal, din1Equal, VXC_MODIFIER_BIN(0, 3, 0), poolingEncode2);
    axisOut = clz(axisEncode);//output

    //write data out
    VXC_WriteImage2DArray(axis, coordOut, axisOut, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
}

__kernel void poolingWithArgmaxInt16_int16_s2k2p0
    (
    image2d_array_t tensorIn,
    image2d_array_t tensorOut,
    image2d_array_t axis,
    int type,
    int sizeX,
    int sizeY,
    int paddingX,
    int paddingY
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    vxc_short8 din0, din1;
    vxc_short8 din0Fp16, din1Fp16;
    vxc_short8 maxDataVer, maxDataVer1;
    int4 bitExtractCoeff;
    vxc_short8 din0EqualTmp, din1EqualTmp;
    vxc_uchar8 din0Equal, din1Equal;
    vxc_uchar4 axisEncode;
    vxc_uchar4 axisOut;

    VXC_ReadImage2DArray(din0, tensorIn, coord, VXC_5BITOFFSET_XY(0, 0),\
        VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(din1, tensorIn, coord, VXC_5BITOFFSET_XY(0, 1),\
        VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    int4 coordOut = (int4)(coord.x >> 1, coord.y >> 1, coord.z, 0);
    _viv_asm(COPY, din0Fp16, din0, 16);
    _viv_asm(COPY, din1Fp16, din1, 16);
    VXC_VertMax3_Integer(maxDataVer, din0Fp16, din1Fp16, din1Fp16, VXC_MODIFIER_BIN(0, 7, 0));
    _viv_asm(COPY, din0, maxDataVer, 16);
    din1 = din0.s10325476;
    _viv_asm(COPY, maxDataVer1, din1, 16);
    VXC_VertMax3_Integer(maxDataVer, maxDataVer1, maxDataVer, maxDataVer, VXC_MODIFIER_BIN(0, 7, 0));
    _viv_asm(COPY, din0, maxDataVer, 16);
    din1 = din0.s02460246;//output

    // convert to fp32, and then convert it back
    vxc_float4 tmpVal0, tmpVal1, tmpVal2, tmpVal3;
    vxc_int4 tmpOut0, tmpOut1;

    //convert to fp32 and then convert back
    VXC_DP4x4(tmpVal0, din1, din1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertDirInt16Fp32_4x4);
    VXC_DP4x4(tmpVal2, din1, din1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertEndInt16Fp32_4x4);
    tmpVal1 = tmpVal0 * scaleSF;
    tmpOut0 = convert_int4_rte(tmpVal1);
    tmpVal3 = tmpVal2 * scaleSF;
    tmpOut1 = convert_int4_rte(tmpVal3);
    VXC_DP2x8(din1, tmpOut0, tmpOut1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1),\
        uniConvertInt32toInt16_2x8);

    //get axis
    VXC_Clamp(din0EqualTmp, din0Fp16, maxDataVer, maxDataVer, VXC_MODIFIER_CLAMP(0, 7, 0, 1));
    VXC_Clamp(din1EqualTmp, din1Fp16, maxDataVer, maxDataVer, VXC_MODIFIER_CLAMP(0, 7, 0, 1));
    bitExtractCoeff = (int4)(0x30201000, 0x70605040, 0x01010101, 0x01010101);
    VXC_BitExtract(din0Equal, din0EqualTmp, din0EqualTmp, bitExtractCoeff, VXC_MODIFIER_BIN(0, 7, 0));
    VXC_BitExtract(din1Equal, din1EqualTmp, din1EqualTmp, bitExtractCoeff, VXC_MODIFIER_BIN(0, 7, 0));
    VXC_DP4x4(axisEncode, din0Equal, din1Equal, VXC_MODIFIER_BIN(0, 3, 0), poolingEncode2);
    axisOut = clz(axisEncode);//output

    //write data out
    VXC_WriteImage2DArray(tensorOut, coordOut, din1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    VXC_WriteImage2DArray(axis, coordOut, axisOut, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
}

__kernel void poolingWithArgmaxInt16_fp16_s2k2p0
    (
    image2d_array_t tensorIn,
    image2d_array_t tensorOut,
    image2d_array_t axis,
    int type,
    int sizeX,
    int sizeY,
    int paddingX,
    int paddingY
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    vxc_short8 din0, din1;
    vxc_short8 din0Fp16, din1Fp16;
    vxc_short8 maxDataVer, maxDataVer1;
    int4 bitExtractCoeff;
    vxc_short8 din0EqualTmp, din1EqualTmp;
    vxc_uchar8 din0Equal, din1Equal;
    vxc_uchar4 axisEncode;
    vxc_uchar4 axisOut;

    VXC_ReadImage2DArray(din0, tensorIn, coord, VXC_5BITOFFSET_XY(0, 0),\
        VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(din1, tensorIn, coord, VXC_5BITOFFSET_XY(0, 1),\
        VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    int4 coordOut = (int4)(coord.x >> 1, coord.y >> 1, coord.z, 0);
    _viv_asm(COPY, din0Fp16, din0, 16);
    _viv_asm(COPY, din1Fp16, din1, 16);
    VXC_VertMax3_Integer(maxDataVer, din0Fp16, din1Fp16, din1Fp16, VXC_MODIFIER_BIN(0, 7, 0));
    _viv_asm(COPY, din0, maxDataVer, 16);
    din1 = din0.s10325476;
    _viv_asm(COPY, maxDataVer1, din1, 16);
    VXC_VertMax3_Integer(maxDataVer, maxDataVer1, maxDataVer, maxDataVer, VXC_MODIFIER_BIN(0, 7, 0));
    _viv_asm(COPY, din0, maxDataVer, 16);
    din1 = din0.s02460246;//output

    // convert to fp32, and then convert it back
    vxc_float4 tmpVal0, tmpVal1, tmpVal2, tmpVal3;
    half4 tmpOut0, tmpOut1;
    vxc_half8 tmpPack;

    //convert to fp32 and then convert back
    VXC_DP4x4(tmpVal0, din1, din1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertDirInt16Fp32_4x4);
    VXC_DP4x4(tmpVal2, din1, din1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertEndInt16Fp32_4x4);
    tmpVal1 = tmpVal0 * input_fl_scale_i16;
    _viv_asm(CONV, tmpOut0, tmpVal1);
    tmpVal3 = tmpVal2 * input_fl_scale_i16;
    _viv_asm(CONV, tmpOut1, tmpVal3);
    VXC_DP2x8(tmpPack, tmpOut0, tmpOut1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniPackHalf8_2x8_2);
    _viv_asm(COPY, din1, tmpPack, 16);

    //get axis
    VXC_Clamp(din0EqualTmp, din0Fp16, maxDataVer, maxDataVer, VXC_MODIFIER_CLAMP(0, 7, 0, 1));
    VXC_Clamp(din1EqualTmp, din1Fp16, maxDataVer, maxDataVer, VXC_MODIFIER_CLAMP(0, 7, 0, 1));
    bitExtractCoeff = (int4)(0x30201000, 0x70605040, 0x01010101, 0x01010101);
    VXC_BitExtract(din0Equal, din0EqualTmp, din0EqualTmp, bitExtractCoeff, VXC_MODIFIER_BIN(0, 7, 0));
    VXC_BitExtract(din1Equal, din1EqualTmp, din1EqualTmp, bitExtractCoeff, VXC_MODIFIER_BIN(0, 7, 0));
    VXC_DP4x4(axisEncode, din0Equal, din1Equal, VXC_MODIFIER_BIN(0, 3, 0), poolingEncode2);
    axisOut = clz(axisEncode);//output

    //write data out
    VXC_WriteImage2DArray(tensorOut, coordOut, din1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    VXC_WriteImage2DArray(axis, coordOut, axisOut, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
}

__kernel void poolingWithArgmaxInt16_axI16_s2k2p0
    (
    image2d_array_t tensorIn,
    image2d_array_t tensorOut,
    image2d_array_t axis,
    int type,
    int sizeX,
    int sizeY,
    int paddingX,
    int paddingY
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    vxc_short8 din0, din1;
    vxc_short8 din0Fp16, din1Fp16;
    vxc_short8 maxDataVer, maxDataVer1;
    int4 bitExtractCoeff;
    vxc_short8 din0EqualTmp, din1EqualTmp;
    vxc_uchar8 din0Equal, din1Equal;
    vxc_uchar4 axisEncode;
    vxc_uchar4 axisOut;
    vxc_short4 axisVal;

    VXC_ReadImage2DArray(din0, tensorIn, coord, VXC_5BITOFFSET_XY(0, 0),\
        VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(din1, tensorIn, coord, VXC_5BITOFFSET_XY(0, 1),\
        VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    int4 coordOut = (int4)(coord.x >> 1, coord.y >> 1, coord.z, 0);
    _viv_asm(COPY, din0Fp16, din0, 16);
    _viv_asm(COPY, din1Fp16, din1, 16);
    VXC_VertMax3_Integer(maxDataVer, din0Fp16, din1Fp16, din1Fp16, VXC_MODIFIER_BIN(0, 7, 0));
    _viv_asm(COPY, din0, maxDataVer, 16);
    din1 = din0.s10325476;
    _viv_asm(COPY, maxDataVer1, din1, 16);
    VXC_VertMax3_Integer(maxDataVer, maxDataVer1, maxDataVer, maxDataVer, VXC_MODIFIER_BIN(0, 7, 0));
    _viv_asm(COPY, din0, maxDataVer, 16);
    din1 = din0.s02460246;//output

    // convert to fp32, and then convert it back
    vxc_float4 tmpVal0, tmpVal1, tmpVal2, tmpVal3;
    vxc_int4 tmpOut0, tmpOut1;

    //convert to fp32 and then convert back
    VXC_DP4x4(tmpVal0, din1, din1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvertDirInt16Fp32_4x4);
    VXC_DP4x4(tmpVal2, din1, din1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvertEndInt16Fp32_4x4);
    tmpVal1 = tmpVal0 * scaleSF;
    tmpOut0 = convert_int4_rte(tmpVal1);
    tmpVal3 = tmpVal2 * scaleSF;
    tmpOut1 = convert_int4_rte(tmpVal3);
    VXC_DP2x8(din1, tmpOut0, tmpOut1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0),\
        uniConvertInt32toInt16_2x8);

    //get axis
    VXC_Clamp(din0EqualTmp, din0Fp16, maxDataVer, maxDataVer, VXC_MODIFIER_CLAMP(0, 7, 0, 1));
    VXC_Clamp(din1EqualTmp, din1Fp16, maxDataVer, maxDataVer, VXC_MODIFIER_CLAMP(0, 7, 0, 1));
    bitExtractCoeff = (int4)(0x30201000, 0x70605040, 0x01010101, 0x01010101);
    VXC_BitExtract(din0Equal, din0EqualTmp, din0EqualTmp, bitExtractCoeff, VXC_MODIFIER_BIN(0, 7, 0));
    VXC_BitExtract(din1Equal, din1EqualTmp, din1EqualTmp, bitExtractCoeff, VXC_MODIFIER_BIN(0, 7, 0));
    VXC_DP4x4(axisEncode, din0Equal, din1Equal, VXC_MODIFIER_BIN(0, 3, 0), poolingEncode2);
    axisOut = clz(axisEncode);//output

    axisVal = convert_short4(axisOut);
    //write data out
    VXC_WriteImage2DArray(tensorOut, coordOut, din1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    VXC_WriteImage2DArray(axis, coordOut, axisVal, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
}