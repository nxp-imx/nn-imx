#include "cl_viv_vx_ext.h"

/********************************instancenorm float16*********************************/
_viv_uniform int width;
_viv_uniform int height;
_viv_uniform float dimRatio;
_viv_uniform VXC_512Bits uniFp16SumSqr_dp8x2;
_viv_uniform VXC_512Bits UniFP16toFP32Lo4_dp4x4;
_viv_uniform VXC_512Bits uniExtractHalf4_dp4x4;
_viv_uniform VXC_512Bits uniConvertInt32toUint8_2x8;
_viv_uniform VXC_512Bits uniConvertEndInt16Fp32_4x4;

__kernel __attribute__((reqd_work_group_size(16, 1, 1))) void vxcInstanceNorm(
    image2d_array_t input,
    image2d_array_t bias,
    image2d_array_t scale,
    image2d_array_t output,
    image2d_array_t meanVari,
              float eps)
{
    int4 coord = (int4)(0, 0, get_global_id(2), 0);
    vxc_short8 src0, src1, src2;
    float sum = 0, sqr = 0, scale_vari, bias_val;
    vxc_half8 in_h, scale_h;
    vxc_float4 bias_f, scale_f;

    for(coord.y = 0; coord.y < height; coord.y++)
    {
        for(coord.x = 0; coord.x < width; coord.x += 8)
        {
            VXC_ReadImage2DArray(src0, input, coord, VXC_5BITOFFSET_XY(0, 0),
                VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
            _viv_asm(COPY, in_h, src0, 16);
            vxc_float4 sumsqr;
            VXC_DP8x2(sumsqr, in_h, in_h, VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0),\
                uniFp16SumSqr_dp8x2);
            sum += sumsqr.x;
            sqr += sumsqr.y;
        }
    }
    coord.w = 0;
    VXC_ReadImage(src1, scale, coord.zw, VXC_5BITOFFSET_XY(0, 0),\
        VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    bias_f = read_imagef(bias, coord.zwww);
    _viv_asm(COPY, scale_h, src1, 16);
    VXC_DP4x4(scale_f, scale_h, scale_h, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        UniFP16toFP32Lo4_dp4x4);
    bias_val = bias_f.s0;

    float mean, vari;
    mean = sum * dimRatio;
    vari = sqr*dimRatio - mean*mean;
    vari += eps;
    vari = rsqrt(vari);
    scale_vari = scale_f.s0 * vari;

    for(coord.y = 0; coord.y < height; coord.y++)
    {
        for(coord.x = 0; coord.x < width; coord.x += 8)
        {
            VXC_ReadImage2DArray(src0, input, coord, VXC_5BITOFFSET_XY(0, 0),
                VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
            _viv_asm(COPY, in_h, src0, 16);

            vxc_float4 in_f0, in_f1;
            VXC_DP4x4(in_f0, in_h, in_h, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
                UniFP16toFP32Lo4_dp4x4);
            VXC_DP4x4(in_f1, in_h, in_h, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
                uniConvertEndInt16Fp32_4x4);

            vxc_float4 sub, norm;
            half4 norm_h0, norm_h1;

            sub = in_f0 - mean;
            norm = scale_vari * sub + bias_val;
            _viv_asm(CONV, norm_h0, norm);

            sub = in_f1 - mean;
            norm = scale_vari * sub + bias_val;
            _viv_asm(CONV, norm_h1, norm);

            VXC_DP2x8(src2, norm_h0, norm_h1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0),
                uniConvertInt32toUint8_2x8);
            VXC_WriteImage2DArray(output, coord, src2, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
        }
    }
}

_viv_uniform VXC_512Bits uniConvert1stUint8SubZpToFp32_4x4;
_viv_uniform VXC_512Bits uniConvert2ndUint8SubZpToFp32_4x4;
_viv_uniform VXC_512Bits uniConvert3rdUint8SubZpToFp32_4x4;
_viv_uniform VXC_512Bits uniConvert4thUint8SubZpToFp32_4x4;
_viv_uniform VXC_512Bits uniSumU8_16x1;
_viv_uniform VXC_512Bits uniSqrSum_16x1;
_viv_uniform float input_scale;
_viv_uniform int inputZP;
_viv_uniform float scale_scale;
_viv_uniform int scaleZP;
_viv_uniform float outputScale;
_viv_uniform int output_ZP;
_viv_uniform int iter;
_viv_uniform int sumInZp;
_viv_uniform int tmpZp1;
_viv_uniform int tmpZp2;
_viv_uniform float e2InScale;
_viv_uniform float rowSumScale;
_viv_uniform int segCnt;
_viv_uniform int segHeight;
_viv_uniform float sumZpScale;
_viv_uniform float scale_inOut;

__kernel __attribute__((reqd_work_group_size(16, 1, 1))) void vxcInstanceNorm_U8(
    image2d_array_t input,
    image2d_array_t bias,
    image2d_array_t scale,
    image2d_array_t output,
    image2d_array_t meanVari,
              float eps)
{
    int gidz = get_global_id(1);
    int4 coord = (int4)(get_global_id(0), 0, gidz, 0);
    int4 coord_para = (int4)(gidz, 0, 0, 0);
    vxc_uchar16 src0, src2;
    vxc_short8 src1;
    vxc_half8 scale_h;
    float scale_vari, bias_val;
    vxc_float4 bias_f, scale_f, mean_vari;

    VXC_ReadImage(src1, scale, coord_para.xy, VXC_5BITOFFSET_XY(0, 0),\
        VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, scale_h, src1, 16);
    VXC_DP4x4(scale_f, scale_h, scale_h, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniFP16toFP32Lo4_dp4x4);

    bias_f = read_imagef(bias, coord_para);
    //bias_val = bias_f.s0;
    coord_para.x = gidz << 2;
    mean_vari = read_imagef(meanVari, coord_para);

    scale_vari = scale_f.s0 * mean_vari.s1;
    short zp = inputZP;
    vxc_int4 tmpVal0, tmpVal1;
    vxc_float4  tmpData0, tmpData1, tmpData2, tmpData3;
    float alpha = scale_inOut * scale_vari;
    bias_val = (bias_f.s0 - scale_vari * mean_vari.s0) * outputScale + output_ZP;

    for(coord.y = 0; coord.y < height; coord.y++)
    {
    VXC_ReadImage2DArray(src0, input, coord, VXC_5BITOFFSET_XY(0, 0),\
        VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    VXC_DP4x4(tmpData0, src0, zp, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvert1stUint8SubZpToFp32_4x4);
    VXC_DP4x4(tmpData1, src0, zp, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvert2ndUint8SubZpToFp32_4x4);
    VXC_DP4x4(tmpData2, src0, zp, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvert3rdUint8SubZpToFp32_4x4);
    VXC_DP4x4(tmpData3, src0, zp, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvert4thUint8SubZpToFp32_4x4);
    vxc_float4 norm;
    norm = tmpData0 * alpha + bias_val;
    tmpVal0 = convert_int4_rte(norm);
    norm = tmpData1 * alpha + bias_val;
    tmpVal1 = convert_int4_rte(norm);
    VXC_DP2x8(src2, tmpVal0, tmpVal1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1),\
        uniConvertInt32toUint8_2x8);
    norm = tmpData2 * alpha + bias_val;
    tmpVal0 = convert_int4_rte(norm);
    norm = tmpData3 * alpha + bias_val;
    tmpVal1 = convert_int4_rte(norm);
    VXC_DP2x8(src2, tmpVal0, tmpVal1, VXC_MODIFIER(8, 15, 0, VXC_RM_TowardZero, 1),\
        uniConvertInt32toUint8_2x8);
    VXC_WriteImage2DArray(output, coord, src2, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    }
}

__kernel __attribute__((reqd_work_group_size(16, 1, 1))) void vxcInstanceNormU8_fp16(
    image2d_array_t input,
    image2d_array_t bias,
    image2d_array_t scale,
    image2d_array_t output,
    image2d_array_t meanVari,
              float eps)
{
    int gidz = get_global_id(1);
    int4 coord = (int4)(get_global_id(0), 0, gidz, 0);
    int4 coord_para = (int4)(gidz, 0, 0, 0);
    vxc_uchar16 src0;
    vxc_short8 src1;
    vxc_half8 scale_h;
    float scale_vari, bias_val;
    vxc_float4 bias_f, scale_f, mean_vari;

    VXC_ReadImage(src1, scale, coord_para.xy, VXC_5BITOFFSET_XY(0, 0),\
        VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, scale_h, src1, 16);
    VXC_DP4x4(scale_f, scale_h, scale_h, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        UniFP16toFP32Lo4_dp4x4);

    bias_f = read_imagef(bias, coord_para);
    //bias_val = bias_f.s0;

    coord_para.x = gidz << 2;
    mean_vari = read_imagef(meanVari, coord_para);

    scale_vari = scale_f.s0 * mean_vari.s1;
    short zp = inputZP;
    vxc_float4  tmpData0, tmpData1, tmpData2, tmpData3;
    vxc_short8 outval;
    half4 tmpVal0, tmpVal1;
    float alpha = input_scale * scale_vari;
    bias_val = (bias_f.s0 - scale_vari * mean_vari.s0);

    for(coord.y = 0; coord.y < height; coord.y++)
    {
    coord_para = coord;
    VXC_ReadImage2DArray(src0, input, coord, VXC_5BITOFFSET_XY(0, 0),\
        VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

    VXC_DP4x4(tmpData0, src0, zp, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvert1stUint8SubZpToFp32_4x4);
    VXC_DP4x4(tmpData1, src0, zp, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvert2ndUint8SubZpToFp32_4x4);
    VXC_DP4x4(tmpData2, src0, zp, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvert3rdUint8SubZpToFp32_4x4);
    VXC_DP4x4(tmpData3, src0, zp, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvert4thUint8SubZpToFp32_4x4);
    vxc_float4 norm;
    norm = alpha * tmpData0 + bias_val;
    _viv_asm(CONV, tmpVal0, norm);
    norm = alpha * tmpData1 + bias_val;
    _viv_asm(CONV, tmpVal1, norm);
    VXC_DP2x8(outval, tmpVal0, tmpVal1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0),\
        uniConvertInt32toUint8_2x8);
    VXC_WriteImage2DArray(output, coord_para, outval, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    coord_para.x += 8;
    norm = alpha * tmpData2 + bias_val;
    _viv_asm(CONV, tmpVal0, norm);
    norm = alpha * tmpData3 + bias_val;
    _viv_asm(CONV, tmpVal1, norm);
    VXC_DP2x8(outval, tmpVal0, tmpVal1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0),\
        uniConvertInt32toUint8_2x8);
    VXC_WriteImage2DArray(output, coord_para, outval, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    }
}

__kernel __attribute__((reqd_work_group_size(1, 1, 1))) void vxcInstanceNormSum_u8(
    image2d_array_t input,
    image2d_array_t output,
       vx_array_int arraySum,
       vx_array_int arraySqr)
{
    int gidy = get_global_id(1);
    int gidz = get_global_id(2);
    int lidx = get_local_id(0);
    int lidy = get_local_id(1);
    int4 coord = (int4)(get_global_id(0), gidy, gidz, 0);
    vxc_uchar16 src0;
    int tmpSum = 0, tmpSqr = 0;
    int tmpSqr1;
    __local int lcl_sum[1];
    __local int lcl_sqr[1];
    if(lidx == 0 && lidy == 0)
    {
        lcl_sum[0] = 0;
        lcl_sqr[0] = 0;
    }
    barrier(CLK_LOCAL_MEM_FENCE);

    VXC_ReadImage2DArray(src0, input, coord, VXC_5BITOFFSET_XY(0, 0),\
        VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    VXC_DP16x1(tmpSum, src0, src0, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0), uniSumU8_16x1);
    VXC_DP16x1(tmpSqr1, src0, src0, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0), uniSqrSum_16x1);
    tmpSqr = (tmpSqr1 + tmpZp1 * tmpSum);

    int offset = gidz * segCnt + (gidy >> 3);
    __global int* gSum = (__global int*)arraySum.item;
    __global int* gSqr = (__global int*)arraySqr.item;

    //atom_add(gSum + gidz, tmpSum);
    //atom_add(gSqr, tmpSqr);
    atom_add(lcl_sum, tmpSum);
    atom_add(lcl_sqr, tmpSqr);
    barrier(CLK_LOCAL_MEM_FENCE);
    if(lidx == 0 && lidy == 0)
    {
        gSum[offset] = lcl_sum[0];
        gSqr[offset] = lcl_sqr[0];
    }
}

__kernel __attribute__((reqd_work_group_size(8, 1, 1))) void vxcInstanceNormSqr_u8(
    image2d_array_t input,
    image2d_array_t output,
              float eps,
       vx_array_int arraySum,
       vx_array_int arraySqr,
     vx_array_float outMean,
     vx_array_float outSqr)
{
    int gidz = get_global_id(0);
    float sum = 0;

    __global int* gSum = (__global int*)arraySum.item;
    __global int* gSqr = (__global int*)arraySqr.item;

    __global float* pMean = (__global float*)outMean.item;
    __global float* pSqr = (__global float*)outSqr.item;

    int offset = gidz * segHeight;
    int tmpSum = gSum[gidz];
    sum = (tmpSum + sumInZp) * input_scale;
    float mean = sum * dimRatio;
    pMean[gidz] = mean;

    float sqr = 0;
    //sqr = (tmpSqr + tmpZp2) * e2InScale;
    for(int i = 0; i < segHeight; i++)
    {
        int tmpSqr = gSqr[offset + i];
        sqr += (tmpSqr * e2InScale + sumZpScale);
    }
    //pSqr[gidz] = sqr;
    float vari = sqr * dimRatio - mean*mean;
    vari += eps;
    vari = rsqrt(vari);
    pSqr[gidz] = vari;
}

__kernel __attribute__((reqd_work_group_size(16, 1, 1))) void vxcInstanceNormMeanVari_u8(
    image2d_array_t input,
    image2d_array_t output,
              float eps)
{
    int lidx = get_local_id(0);
    int gidz = get_global_id(1);
    int4 coord = (int4)(0, 0, gidz, 0);
    vxc_uchar16 src0;
    float sum = 0, sqr = 0;
    int tmpSum = 0, tmpSqr = 0;
    int colCnt = 0;
    int tmpSum1, tmpSqr1;

    __local float lcl_sum[16];
    __local float lcl_sqr[16];

    for(coord.x = (lidx << 4); coord.x < width; coord.x += 256)
    {
        tmpSqr = 0;
        for(coord.y = 0; coord.y < height; coord.y++)
        {
            VXC_ReadImage2DArray(src0, input, coord, VXC_5BITOFFSET_XY(0, 0),
                VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
            VXC_DP16x1(tmpSum1, src0, src0, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0), uniSumU8_16x1);
            tmpSum += (tmpSum1);
            VXC_DP16x1(tmpSqr1, src0, src0, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0), uniSqrSum_16x1);
            tmpSqr += (tmpSqr1 + tmpZp1 * tmpSum1);
        }
        sqr += (tmpSqr * e2InScale + rowSumScale);
        colCnt++;
    }
    sum = (tmpSum + sumInZp * colCnt) * input_scale;
    //sqr = (tmpSqr + tmpZp2) * e2InScale;

    lcl_sum[lidx] = sum;
    lcl_sqr[lidx] = sqr;
    barrier(CLK_LOCAL_MEM_FENCE);

    int4 coord_out = (int4)(gidz << 2, 0, 0, 0);
    if(lidx == 0)
    {
        sum = 0; sqr = 0;
        for(int i = 0; i < 16; i++)
        {
            sum += lcl_sum[i];
            sqr += lcl_sqr[i];
        }
        float mean = sum * dimRatio;
        float vari = sqr * dimRatio - mean*mean;
        vari += eps;
        vari = rsqrt(vari);
        float4 data = (float4)(0, 0, 0, 0);
        data.x = mean;
        data.y = vari;
        write_imagef(output, coord_out, data);
    }
}