
#include "cl_viv_vx_ext.h"

//--------------------------unpooling uint8-------------------------
__kernel void unpoolingUint8_Uint8_2D
    (
        image2d_array_t dataIn,
        image2d_array_t axis,
        image2d_array_t dataOut,
        unsigned int sizeX,
        unsigned int sizeY
    )
{
    vxc_uchar8  din;
    vxc_uchar8  axisIn;
    vxc_uchar16 dinExpand;
    vxc_uchar16 axisInExpand;
    vxc_uchar16 constAxis;
    vxc_uchar16 axisData;
    vxc_uchar16 axisData1;
    vxc_uchar16 dout;

    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    VXC_ReadImage(din, dataIn, coord, VXC_5BITOFFSET_XY(0, 0),\
        VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(axisIn, axis, coord, VXC_5BITOFFSET_XY(0, 0),\
        VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    int2 coordOut = coord << 1;

    constAxis      = (vxc_uchar16)(0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1);
    dinExpand    = din.s0011223344556677;
    axisInExpand = axisIn.s0011223344556677;
    VXC_Clamp(axisData, axisInExpand, constAxis, constAxis, VXC_MODIFIER_CLAMP(0, 15, 0, 1));
    axisData &= (vxc_uchar16)(1);
    _viv_asm(COPY, axisData1, axisData, 16);
    dout = axisData1 * dinExpand;   //output
    VXC_WriteImage(dataOut, coordOut, dout, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

    constAxis = (vxc_uchar16)(2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3);
    VXC_Clamp(axisData, axisInExpand, constAxis, constAxis, VXC_MODIFIER_CLAMP(0, 15, 0, 1));
    axisData &= (vxc_uchar16)(1);
    _viv_asm(COPY, axisData1, axisData, 16);
    dout = axisData1 * dinExpand;  //output
    coordOut.y += 1;
    VXC_WriteImage(dataOut, coordOut, dout, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
}

_viv_uniform VXC_512Bits uniF16MulMultipiler_PostShft_2x8;
_viv_uniform VXC_512Bits uniS16AddOutZP_2x8;
_viv_uniform vxc_uint4 packed_outputZP;
__kernel void unpoolingFp16_Uint8_2D
    (
        image2d_array_t dataIn,
        image2d_array_t axis,
        image2d_array_t dataOut,
        unsigned int sizeX,
        unsigned int sizeY
    )
{
    vxc_short8 din0;
    vxc_uchar8 din;
    vxc_uchar8 axisIn;
    vxc_half8 src;

    vxc_uchar16 dinExpand;
    vxc_uchar16 axisInExpand;
    vxc_uchar16 constAxis;
    vxc_uchar16 axisData;
    vxc_uchar16 axisData1;
    vxc_uchar16 dout;

    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    VXC_ReadImage(din, dataIn, coord, VXC_5BITOFFSET_XY(0, 0),\
        VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(axisIn, axis, coord, VXC_5BITOFFSET_XY(0, 0),\
        VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    int2 coordOut = coord << 1;

    vxc_short8 tmp;
    uchar zp = 0;
    _viv_asm(COPY, src, din, 16);
    VXC_DP2x8(tmp, src, src, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1),\
        uniF16MulMultipiler_PostShft_2x8);
    vxc_uchar16 packed_outZP;
    _viv_asm(COPY, packed_outZP, packed_outputZP, 16);
    VXC_DP2x8(din, tmp, packed_outZP, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1),\
        uniS16AddOutZP_2x8);


    constAxis      = (vxc_uchar16)(0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1);
    dinExpand    = din.s0011223344556677;
    axisInExpand = axisIn.s0011223344556677;
    VXC_Clamp(axisData, axisInExpand, constAxis, constAxis, VXC_MODIFIER_CLAMP(0, 15, 0, 1));
    axisData &= (vxc_uchar16)(1);
    _viv_asm(COPY, axisData1, axisData, 16);
    dout = axisData1 * dinExpand;
    VXC_WriteImage(dataOut, coordOut, dout, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

    constAxis = (vxc_uchar16)(2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3);
    VXC_Clamp(axisData, axisInExpand, constAxis, constAxis, VXC_MODIFIER_CLAMP(0, 15, 0, 1));
    axisData &= (vxc_uchar16)(1);
    _viv_asm(COPY, axisData1, axisData, 16);
    dout = axisData1 * dinExpand;  //output
    coordOut.y += 1;
    VXC_WriteImage(dataOut, coordOut, dout, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
}

_viv_uniform VXC_512Bits uniMulMinusZpUint8_4x4;
_viv_uniform VXC_512Bits uniMulMinusZp2Uint8_4x4;
_viv_uniform VXC_512Bits uniMulMinusZp3Uint8_4x4;
_viv_uniform VXC_512Bits uniMulMinusZp4Uint8_4x4;

_viv_uniform VXC_512Bits uniConvertInt32toInt16_2x8;
_viv_uniform VXC_512Bits uniConvertDirUint8Fp32_4x4;
_viv_uniform VXC_512Bits uniConvertEndUint8Fp32_4x4;
_viv_uniform VXC_512Bits uniConvertTrdUint8Fp32_4x4;
_viv_uniform VXC_512Bits uniConvertFthUint8Fp32_4x4;

_viv_uniform float scaleU8Fp16;
_viv_uniform int zpU8Fp16;

__kernel void unpoolingUint8_Fp16
    (
        image2d_array_t dataIn,
        image2d_array_t axis,
        image2d_array_t dataOut,
        unsigned int sizeX,
        unsigned int sizeY
    )
{
    vxc_uchar8 din;
    vxc_uchar8 axisIn;
    vxc_uchar16 dinExpand;
    vxc_uchar16 axisInExpand;
    vxc_uchar16 constAxis;
    vxc_uchar16 axisData;
    vxc_uchar16 axisData1;
    vxc_uchar16 dout;

    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    VXC_ReadImage2DArray(din, dataIn, coord, VXC_5BITOFFSET_XY(0, 0),\
        VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(axisIn, axis, coord, VXC_5BITOFFSET_XY(0, 0),\
        VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    int4 coordOut = (int4)(coord.x << 1, coord.y << 1, coord.z, 0);
    int4 coordOut1 = coordOut;
    coordOut1.x += 8;
    dinExpand = din.s0011223344556677;
    axisInExpand = axisIn.s0011223344556677;
    constAxis = (vxc_uchar16)(0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1);
    VXC_Clamp(axisData, axisInExpand, constAxis, constAxis, VXC_MODIFIER_CLAMP(0, 15, 0, 1));
    axisData &= (vxc_uchar16)(1);
    _viv_asm(COPY, axisData1, axisData, 16);
    dout = axisData1 * dinExpand;   //output

    vxc_float4 tmpVal0, tmpVal1, tmpVal2, tmpVal3, convZp;
    half4 tmpOut0, tmpOut1;
    vxc_short8 rout0, rout1;
    vxc_int4 tmpV0, tmpV1, tmpV2, tmpV3;
    vxc_float4 tmpData0, tmpData1, tmpData2, tmpData3;
    short tmpZp = (short)(-zpU8Fp16);
    VXC_DP4x4(tmpVal0, dout, dout, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvertDirUint8Fp32_4x4);
    VXC_DP4x4(tmpVal1, dout, dout, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvertEndUint8Fp32_4x4);
    VXC_DP4x4(tmpVal2, dout, dout, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvertTrdUint8Fp32_4x4);
    VXC_DP4x4(tmpVal3, dout, dout, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvertFthUint8Fp32_4x4);
    VXC_DP4x4(tmpV0, axisData1, tmpZp, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniMulMinusZpUint8_4x4);
    VXC_DP4x4(tmpV1, axisData1, tmpZp, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniMulMinusZp2Uint8_4x4);
    VXC_DP4x4(tmpV2, axisData1, tmpZp, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniMulMinusZp3Uint8_4x4);
    VXC_DP4x4(tmpV3, axisData1, tmpZp, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniMulMinusZp4Uint8_4x4);
    _viv_asm(CONV, tmpData0, tmpV0);
    _viv_asm(CONV, tmpData1, tmpV1);
    _viv_asm(CONV, tmpData2, tmpV2);
    _viv_asm(CONV, tmpData3, tmpV3);
    tmpVal0 = (tmpVal0 + tmpData0) * scaleU8Fp16;
    tmpVal1 = (tmpVal1 + tmpData1) * scaleU8Fp16;
    tmpVal2 = (tmpVal2 + tmpData2) * scaleU8Fp16;
    tmpVal3 = (tmpVal3 + tmpData3) * scaleU8Fp16;
    _viv_asm(CONV, tmpOut0, tmpVal0);
    _viv_asm(CONV, tmpOut1, tmpVal1);
    VXC_DP2x8(rout0, tmpOut0, tmpOut1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0),\
        uniConvertInt32toInt16_2x8);
    _viv_asm(CONV, tmpOut0, tmpVal2);
    _viv_asm(CONV, tmpOut1, tmpVal3);
    VXC_DP2x8(rout1, tmpOut0, tmpOut1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0),\
        uniConvertInt32toInt16_2x8);
    VXC_WriteImage2DArray(dataOut, coordOut, rout0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_WriteImage2DArray(dataOut, coordOut1, rout1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    constAxis = (vxc_uchar16)(2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3);
    VXC_Clamp(axisData, axisInExpand, constAxis, constAxis, VXC_MODIFIER_CLAMP(0, 15, 0, 1));
    axisData &= (vxc_uchar16)(1);
    _viv_asm(COPY, axisData1, axisData, 16);
    dout = axisData1 * dinExpand;  //output

    VXC_DP4x4(tmpVal0, dout, dout, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvertDirUint8Fp32_4x4);
    VXC_DP4x4(tmpVal1, dout, dout, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvertEndUint8Fp32_4x4);
    VXC_DP4x4(tmpVal2, dout, dout, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvertTrdUint8Fp32_4x4);
    VXC_DP4x4(tmpVal3, dout, dout, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniConvertFthUint8Fp32_4x4);
    VXC_DP4x4(tmpV0, axisData1, tmpZp, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniMulMinusZpUint8_4x4);
    VXC_DP4x4(tmpV1, axisData1, tmpZp, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniMulMinusZp2Uint8_4x4);
    VXC_DP4x4(tmpV2, axisData1, tmpZp, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniMulMinusZp3Uint8_4x4);
    VXC_DP4x4(tmpV3, axisData1, tmpZp, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
        uniMulMinusZp4Uint8_4x4);
    _viv_asm(CONV, tmpData0, tmpV0);
    _viv_asm(CONV, tmpData1, tmpV1);
    _viv_asm(CONV, tmpData2, tmpV2);
    _viv_asm(CONV, tmpData3, tmpV3);
    tmpVal0 = (tmpVal0 + tmpData0) * scaleU8Fp16;
    tmpVal1 = (tmpVal1 + tmpData1) * scaleU8Fp16;
    tmpVal2 = (tmpVal2 + tmpData2) * scaleU8Fp16;
    tmpVal3 = (tmpVal3 + tmpData3) * scaleU8Fp16;
    _viv_asm(CONV, tmpOut0, tmpVal0);
    _viv_asm(CONV, tmpOut1, tmpVal1);
    VXC_DP2x8(rout0, tmpOut0, tmpOut1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0),\
        uniConvertInt32toInt16_2x8);
    _viv_asm(CONV, tmpOut0, tmpVal2);
    _viv_asm(CONV, tmpOut1, tmpVal3);
    VXC_DP2x8(rout1, tmpOut0, tmpOut1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0),\
        uniConvertInt32toInt16_2x8);

    coordOut.y += 1;
    coordOut1.y += 1;
    VXC_WriteImage2DArray(dataOut, coordOut, rout0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_WriteImage2DArray(dataOut, coordOut1, rout1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}
