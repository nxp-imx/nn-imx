/****************************************************************************
*
*    Copyright (c) 2019 Vivante Corporation
*
*    Permission is hereby granted, free of charge, to any person obtaining a
*    copy of this software and associated documentation files (the "Software"),
*    to deal in the Software without restriction, including without limitation
*    the rights to use, copy, modify, merge, publish, distribute, sublicense,
*    and/or sell copies of the Software, and to permit persons to whom the
*    Software is furnished to do so, subject to the following conditions:
*
*    The above copyright notice and this permission notice shall be included in
*    all copies or substantial portions of the Software.
*
*    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
*    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
*    DEALINGS IN THE SOFTWARE.
*
*****************************************************************************/

#ifndef __ANEURALNETWORKS_GENERATE_PROPOSALS_HPP__
#define __ANEURALNETWORKS_GENERATE_PROPOSALS_HPP__

#include "api_requirement/spec_macros.hpp"

/**
 * Generate aixs-aligned bounding box proposals.
 *
 * Bounding box proposals are generated by applying transformation on a set
 * of predefined anchors with the bounding box deltas from bounding box
 * regression. A final step of hard NMS is applied to limit the number of
 * returned boxes.
 *
 * Axis-aligned bounding boxes are represented by its upper-left corner
 * coordinate (x1,y1) and lower-right corner coordinate (x2,y2). A valid
 * bounding box should satisfy x1 <= x2 and y1 <= y2.
 *
 * Supported tensor {@link OperandCode}:
 * * {@link ANEURALNETWORKS_TENSOR_FLOAT16}
 * * {@link ANEURALNETWORKS_TENSOR_FLOAT32}
 * * {@link ANEURALNETWORKS_TENSOR_QUANT8_ASYMM}
 *
 * Inputs:
 * * 0: A 4-D Tensor specifying the score of each anchor at each
 *      location. With "NHWC" data layout, the tensor shape is
 *      [batches, height, width, num_anchors]. With "NCHW" data layout,
 *      the tensor shape is [batches, num_anchors, height, width].
 * * 1: A 4-D Tensor specifying the bounding box deltas. With "NHWC" data
 *      layout, the tensor shape is [batches, height, width, num_anchors * 4].
 *      With "NCHW" data layout, the tensor shape is
 *      [batches, num_anchors * 4, height, width]. The box deltas are encoded
 *      in the order of [dx, dy, dw, dh], where dx and dy is the linear-scale
 *      relative correction factor for the center position of the bounding box
 *      with respect to the width and height, dw and dh is the log-scale
 *      relative correction factor for the width and height. The last
 *      dimensions is the channel dimension.
 * * 2: A 2-D Tensor of shape [num_anchors, 4], specifying the shape of each
 *      predefined anchor, with format [x1, y1, x2, y2]. For input0 of type
 *      {@link ANEURALNETWORKS_TENSOR_QUANT8_ASYMM}, this tensor should be of
 *      {@link ANEURALNETWORKS_TENSOR_QUANT16_SYMM}, with scale of 0.125.
 * * 3: A 2-D Tensor of shape [batches, 2], specifying the size of
 *      each image in the batch, with format [image_height, image_width].
 *      For input0 of type {@link ANEURALNETWORKS_TENSOR_QUANT8_ASYMM}, this
 *      tensor should be of {@link ANEURALNETWORKS_TENSOR_QUANT16_SYMM}, with
 *      scale of 0.125.
 * * 4: An {@link ANEURALNETWORKS_FLOAT32} scalar, specifying the ratio
 *      from the height of original image to the height of feature map.
 * * 5: An {@link ANEURALNETWORKS_FLOAT32} scalar, specifying the ratio
 *      from the width of original image to the width of feature map.
 * * 6: An {@link ANEURALNETWORKS_INT32} scalar, specifying the maximum
 *      number of boxes before going into the hard NMS algorithm. Boxes
 *      with the lowest scores are discarded to meet the limit. Set to
 *      a non-positive value for unlimited number.
 * * 7: An {@link ANEURALNETWORKS_INT32} scalar, specifying the maximum
 *      number of boxes returning from the hard NMS algorithm. Boxes
 *      with the lowest scores are discarded to meet the limit. Set to
 *      a non-positive value for unlimited number.
 * * 8: An {@link ANEURALNETWORKS_FLOAT32} scalar, specifying the IoU
 *      threshold for hard NMS.
 * * 9: An {@link ANEURALNETWORKS_FLOAT32} scalar, min_size. Boxes with
 *      height or width lower than the absolute threshold are filtered out.
 * * 10: An {@link ANEURALNETWORKS_BOOL} scalar, set to true to specify
 *       NCHW data layout for input0 and input1. Set to false for NHWC.
 *
 * Outputs:
 * * 0: A tensor of the same {@link OperandCode} as input0, of shape
 *      [num_output_rois], specifying the score of each output box.
 *      The boxes are grouped by batches, but the sequential order in
 *      each batch is not guaranteed. For type of
 *      {@link ANEURALNETWORKS_TENSOR_QUANT8_ASYMM}, the scale and zero
 *      point must be the same as input0.
 * * 1: A tensor of the same {@link OperandCode} as input3, of shape
 *      [num_output_rois, 4], specifying the coordinates of each output
 *      bounding box for each class, with format [x1, y1, x2, y2].
 *      The sequential order of the boxes corresponds with output0.
 *      For type of {@link ANEURALNETWORKS_TENSOR_QUANT16_ASYMM}, the
 *      scale must be 0.125 and the zero point must be 0.
 * * 2: A 1-D {@link ANEURALNETWORKS_TENSOR_INT32} tensor, of shape
 *      [num_output_rois], specifying the batch index of each box. Boxes
 *      with the same batch index are grouped together.
 *
 * Available since API level 29.
 */

#define OP_SPEC_NAME GenerateProposalsOperation
OP_SPEC_BEGIN()
#define ARG_NAMES         \
    (score,                 \
     bounding_box,           \
     anchor_shape,           \
     image_size,            \
     ratio_h,               \
     ratio_w,               \
     pre_nms_topn,           \
     post_nms_topn,          \
     iou_threshold,          \
     min_size,              \
     layout)
#define ARGC BOOST_PP_TUPLE_SIZE(ARG_NAMES)

#define BOOST_PP_LOCAL_MACRO(n) OP_SPEC_ARG(BOOST_PP_TUPLE_ELEM(ARGC, n, ARG_NAMES))
#define BOOST_PP_LOCAL_LIMITS (0, ARGC)
#include BOOST_PP_LOCAL_ITERATE()
OP_SPEC_END()

// order of argument is important
MAKE_SPEC(generate_proposals)
    .score_(nnrt::OperandType::TENSOR_FLOAT32)
    .bounding_box_(nnrt::OperandType::TENSOR_FLOAT32)
    .anchor_shape_(nnrt::OperandType::TENSOR_FLOAT32)
    .image_size_(nnrt::OperandType::TENSOR_FLOAT32)
    .ratio_h_(nnrt::OperandType::FLOAT32)
    .ratio_w_(nnrt::OperandType::FLOAT32)
    .pre_nms_topn_(nnrt::OperandType::INT32)
    .post_nms_topn_(nnrt::OperandType::INT32)
    .iou_threshold_(nnrt::OperandType::FLOAT32)
    .min_size_(nnrt::OperandType::FLOAT32)
    .layout_(nnrt::OperandType::BOOL));

    OVERRIDE_SPEC(generate_proposals, float16)
    .score_(nnrt::OperandType::TENSOR_FLOAT16)
    .bounding_box_(nnrt::OperandType::TENSOR_FLOAT16)
    .anchor_shape_(nnrt::OperandType::TENSOR_FLOAT16)
    .image_size_(nnrt::OperandType::TENSOR_FLOAT16));

    OVERRIDE_SPEC(generate_proposals, quant8_asymm)
    .score_(nnrt::OperandType::TENSOR_QUANT8_ASYMM)
    .bounding_box_(nnrt::OperandType::TENSOR_QUANT8_ASYMM)
    .anchor_shape_(nnrt::OperandType::TENSOR_QUANT16_SYMM)
    .image_size_(nnrt::OperandType::TENSOR_QUANT16_SYMM));

#undef ARG_NAMES
#undef ARGC
#undef OP_SPEC_NAME

#endif
